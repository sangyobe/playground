// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LeoQuad.proto

#include "LeoQuad.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dtproto {
namespace leoquad {
PROTOBUF_CONSTEXPR ThreadState::ThreadState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ctrlperiod_ms_)*/0
  , /*decltype(_impl_.ctrlload_ms_)*/0
  , /*decltype(_impl_.mpcperiod_ms_)*/0
  , /*decltype(_impl_.mpcload_ms_)*/0
  , /*decltype(_impl_.imuperiod_ms_)*/0
  , /*decltype(_impl_.imuload_ms_)*/0
  , /*decltype(_impl_.joystickperiod_ms_)*/0
  , /*decltype(_impl_.joystickload_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThreadStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreadStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreadStateDefaultTypeInternal() {}
  union {
    ThreadState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreadStateDefaultTypeInternal _ThreadState_default_instance_;
PROTOBUF_CONSTEXPR TaskState::TaskState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.rot_)*/nullptr
  , /*decltype(_impl_.linvel_)*/nullptr
  , /*decltype(_impl_.angvel_)*/nullptr
  , /*decltype(_impl_.force_)*/nullptr
  , /*decltype(_impl_.moment_)*/nullptr
  , /*decltype(_impl_.wrench_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskStateDefaultTypeInternal() {}
  union {
    TaskState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskStateDefaultTypeInternal _TaskState_default_instance_;
PROTOBUF_CONSTEXPR JointState::JointState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statusword_)*/0u
  , /*decltype(_impl_.controlword_)*/0u
  , /*decltype(_impl_.incposofs_cnt_)*/0
  , /*decltype(_impl_.absposofs_cnt_)*/0
  , /*decltype(_impl_.incpos_cnt_)*/0
  , /*decltype(_impl_.abspos_cnt_)*/0
  , /*decltype(_impl_.incvel_cps_)*/0
  , /*decltype(_impl_.mcutemp_c_)*/0
  , /*decltype(_impl_.invtemp_c_)*/0
  , /*decltype(_impl_.inputvolt_v_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointStateDefaultTypeInternal() {}
  union {
    JointState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointStateDefaultTypeInternal _JointState_default_instance_;
PROTOBUF_CONSTEXPR JointData::JointData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_rad_)*/0
  , /*decltype(_impl_.posaux_rad_)*/0
  , /*decltype(_impl_.vel_rps_)*/0
  , /*decltype(_impl_.acc_rpss_)*/0
  , /*decltype(_impl_.torq_nm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JointDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointDataDefaultTypeInternal() {}
  union {
    JointData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointDataDefaultTypeInternal _JointData_default_instance_;
PROTOBUF_CONSTEXPR ControlState::ControlState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posworld2footwrtworld_)*/{}
  , /*decltype(_impl_.velworld2footwrtworld_)*/{}
  , /*decltype(_impl_.posbody2footwrtworld_)*/{}
  , /*decltype(_impl_.velbody2footwrtworld_)*/{}
  , /*decltype(_impl_.posbody2footwrtbody_)*/{}
  , /*decltype(_impl_.velbody2footwrtbody_)*/{}
  , /*decltype(_impl_.forceworld2footwrtworld_)*/{}
  , /*decltype(_impl_.posworld2comwrtworld_)*/nullptr
  , /*decltype(_impl_.velworld2comwrtworld_)*/nullptr
  , /*decltype(_impl_.posworld2bodywrtworld_)*/nullptr
  , /*decltype(_impl_.velworld2bodywrtworld_)*/nullptr
  , /*decltype(_impl_.euleranglebodywrtworld_)*/nullptr
  , /*decltype(_impl_.angularvelbodywrtworld_)*/nullptr
  , /*decltype(_impl_.angularvelbodywrtbody_)*/nullptr
  , /*decltype(_impl_.angularmomentumbodywrtworld_)*/nullptr
  , /*decltype(_impl_.rotbodywrtworld_)*/nullptr
  , /*decltype(_impl_.contact_)*/nullptr
  , /*decltype(_impl_.posctrl2comwrtworld_)*/nullptr
  , /*decltype(_impl_.velctrl2comwrtworld_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlStateDefaultTypeInternal() {}
  union {
    ControlState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStateDefaultTypeInternal _ControlState_default_instance_;
PROTOBUF_CONSTEXPR CpgState::CpgState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.periods_)*/nullptr
  , /*decltype(_impl_.phases_)*/nullptr
  , /*decltype(_impl_.phi_)*/nullptr
  , /*decltype(_impl_.phitogo_)*/nullptr
  , /*decltype(_impl_.phist_)*/nullptr
  , /*decltype(_impl_.phisw_)*/nullptr
  , /*decltype(_impl_.cpg_)*/nullptr
  , /*decltype(_impl_.contact_)*/nullptr
  , /*decltype(_impl_.phasechangeflag_)*/nullptr
  , /*decltype(_impl_.periodchangeflag_)*/nullptr
  , /*decltype(_impl_.phasediff_)*/nullptr
  , /*decltype(_impl_.phitran_)*/nullptr
  , /*decltype(_impl_.phitranst_)*/nullptr
  , /*decltype(_impl_.phitransw_)*/nullptr
  , /*decltype(_impl_.step_)*/nullptr
  , /*decltype(_impl_.dt_)*/0
  , /*decltype(_impl_.air_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpgStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpgStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpgStateDefaultTypeInternal() {}
  union {
    CpgState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpgStateDefaultTypeInternal _CpgState_default_instance_;
PROTOBUF_CONSTEXPR LeoQuadState::LeoQuadState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.jointstate_)*/{}
  , /*decltype(_impl_.actjointdata_)*/{}
  , /*decltype(_impl_.desjointdata_)*/{}
  , /*decltype(_impl_.destaskstate_)*/nullptr
  , /*decltype(_impl_.acttaskstate_)*/nullptr
  , /*decltype(_impl_.imu_)*/nullptr
  , /*decltype(_impl_.joystick_)*/nullptr
  , /*decltype(_impl_.actcontrolstate_)*/nullptr
  , /*decltype(_impl_.descontrolstate_)*/nullptr
  , /*decltype(_impl_.cpgstate_)*/nullptr
  , /*decltype(_impl_.threadstate_)*/nullptr
  , /*decltype(_impl_.arbitrarystate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeoQuadStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeoQuadStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeoQuadStateDefaultTypeInternal() {}
  union {
    LeoQuadState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeoQuadStateDefaultTypeInternal _LeoQuadState_default_instance_;
PROTOBUF_CONSTEXPR LeoQuadStateTimeStamped::LeoQuadStateTimeStamped(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeoQuadStateTimeStampedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeoQuadStateTimeStampedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeoQuadStateTimeStampedDefaultTypeInternal() {}
  union {
    LeoQuadStateTimeStamped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeoQuadStateTimeStampedDefaultTypeInternal _LeoQuadStateTimeStamped_default_instance_;
}  // namespace leoquad
}  // namespace dtproto
static ::_pb::Metadata file_level_metadata_LeoQuad_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_LeoQuad_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_LeoQuad_2eproto = nullptr;

const uint32_t TableStruct_LeoQuad_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ThreadState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ThreadState, _impl_.ctrlperiod_ms_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ThreadState, _impl_.ctrlload_ms_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ThreadState, _impl_.mpcperiod_ms_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ThreadState, _impl_.mpcload_ms_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ThreadState, _impl_.imuperiod_ms_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ThreadState, _impl_.imuload_ms_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ThreadState, _impl_.joystickperiod_ms_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ThreadState, _impl_.joystickload_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::TaskState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::TaskState, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::TaskState, _impl_.rot_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::TaskState, _impl_.linvel_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::TaskState, _impl_.angvel_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::TaskState, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::TaskState, _impl_.moment_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::TaskState, _impl_.wrench_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::TaskState, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.statusword_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.controlword_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.incposofs_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.absposofs_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.incpos_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.abspos_cnt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.incvel_cps_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.mcutemp_c_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.invtemp_c_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointState, _impl_.inputvolt_v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointData, _impl_.pos_rad_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointData, _impl_.posaux_rad_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointData, _impl_.vel_rps_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointData, _impl_.acc_rpss_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::JointData, _impl_.torq_nm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.posworld2comwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.velworld2comwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.posworld2bodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.velworld2bodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.euleranglebodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.angularvelbodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.angularvelbodywrtbody_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.angularmomentumbodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.posworld2footwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.velworld2footwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.posbody2footwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.velbody2footwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.posbody2footwrtbody_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.velbody2footwrtbody_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.forceworld2footwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.rotbodywrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.contact_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.posctrl2comwrtworld_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::ControlState, _impl_.velctrl2comwrtworld_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.periods_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phases_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phi_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phitogo_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phist_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phisw_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.cpg_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.contact_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phasechangeflag_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.periodchangeflag_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phasediff_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phitran_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phitranst_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.phitransw_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.step_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.dt_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::CpgState, _impl_.air_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.jointstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.actjointdata_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.desjointdata_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.destaskstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.acttaskstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.imu_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.joystick_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.actcontrolstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.descontrolstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.cpgstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.threadstate_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadState, _impl_.arbitrarystate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadStateTimeStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadStateTimeStamped, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::dtproto::leoquad::LeoQuadStateTimeStamped, _impl_.state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dtproto::leoquad::ThreadState)},
  { 14, -1, -1, sizeof(::dtproto::leoquad::TaskState)},
  { 28, -1, -1, sizeof(::dtproto::leoquad::JointState)},
  { 44, -1, -1, sizeof(::dtproto::leoquad::JointData)},
  { 55, -1, -1, sizeof(::dtproto::leoquad::ControlState)},
  { 80, -1, -1, sizeof(::dtproto::leoquad::CpgState)},
  { 103, -1, -1, sizeof(::dtproto::leoquad::LeoQuadState)},
  { 121, -1, -1, sizeof(::dtproto::leoquad::LeoQuadStateTimeStamped)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dtproto::leoquad::_ThreadState_default_instance_._instance,
  &::dtproto::leoquad::_TaskState_default_instance_._instance,
  &::dtproto::leoquad::_JointState_default_instance_._instance,
  &::dtproto::leoquad::_JointData_default_instance_._instance,
  &::dtproto::leoquad::_ControlState_default_instance_._instance,
  &::dtproto::leoquad::_CpgState_default_instance_._instance,
  &::dtproto::leoquad::_LeoQuadState_default_instance_._instance,
  &::dtproto::leoquad::_LeoQuadStateTimeStamped_default_instance_._instance,
};

const char descriptor_table_protodef_LeoQuad_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rLeoQuad.proto\022\017dtproto.leoquad\032\035dtProt"
  "o/std_msgs/Header.proto\032\"dtProto/std_msg"
  "s/PackedArray.proto\032!dtProto/geometry_ms"
  "gs/Point.proto\032\"dtProto/geometry_msgs/Wr"
  "ench.proto\032\'dtProto/geometry_msgs/Orient"
  "ation.proto\032\"dtProto/geometry_msgs/Matri"
  "x.proto\032\"dtProto/geometry_msgs/Vector.pr"
  "oto\032\035dtProto/sensor_msgs/Imu.proto\032\035dtPr"
  "oto/sensor_msgs/Joy.proto\"\301\001\n\013ThreadStat"
  "e\022\025\n\rctrlPeriod_ms\030\001 \001(\001\022\023\n\013ctrlLoad_ms\030"
  "\002 \001(\001\022\024\n\014mpcPeriod_ms\030\003 \001(\001\022\022\n\nmpcLoad_m"
  "s\030\004 \001(\001\022\024\n\014imuPeriod_ms\030\005 \001(\001\022\022\n\nimuLoad"
  "_ms\030\006 \001(\001\022\031\n\021joystickPeriod_ms\030\007 \001(\001\022\027\n\017"
  "joystickLoad_ms\030\010 \001(\001\"\340\002\n\tTaskState\022+\n\003p"
  "os\030\001 \001(\0132\036.dtproto.geometry_msgs.Point3d"
  "\022,\n\003rot\030\002 \001(\0132\037.dtproto.geometry_msgs.Ro"
  "tation\022.\n\006linVel\030\003 \001(\0132\036.dtproto.geometr"
  "y_msgs.Point3d\022.\n\006angVel\030\004 \001(\0132\036.dtproto"
  ".geometry_msgs.Point3d\022-\n\005force\030\005 \001(\0132\036."
  "dtproto.geometry_msgs.Point3d\022.\n\006moment\030"
  "\006 \001(\0132\036.dtproto.geometry_msgs.Point3d\022-\n"
  "\006wrench\030\007 \001(\0132\035.dtproto.geometry_msgs.Wr"
  "ench\022\n\n\002id\030\010 \001(\r\"\332\001\n\nJointState\022\022\n\nstatu"
  "sWord\030\001 \001(\r\022\023\n\013controlWord\030\002 \001(\r\022\025\n\rincP"
  "osOfs_cnt\030\003 \001(\005\022\025\n\rabsPosOfs_cnt\030\004 \001(\005\022\022"
  "\n\nincPos_cnt\030\005 \001(\005\022\022\n\nabsPos_cnt\030\006 \001(\005\022\022"
  "\n\nincVel_cps\030\007 \001(\005\022\021\n\tmcuTemp_C\030\010 \001(\002\022\021\n"
  "\tinvTemp_C\030\t \001(\002\022\023\n\013inputVolt_V\030\n \001(\002\"d\n"
  "\tJointData\022\017\n\007pos_rad\030\001 \001(\001\022\022\n\nposAux_ra"
  "d\030\002 \001(\001\022\017\n\007vel_rps\030\003 \001(\001\022\020\n\010acc_rpss\030\004 \001"
  "(\001\022\017\n\007torq_Nm\030\005 \001(\001\"\241\t\n\014ControlState\022<\n\024"
  "posWorld2ComWrtWorld\030\001 \001(\0132\036.dtproto.geo"
  "metry_msgs.Point3d\022<\n\024velWorld2ComWrtWor"
  "ld\030\002 \001(\0132\036.dtproto.geometry_msgs.Point3d"
  "\022=\n\025posWorld2BodyWrtWorld\030\003 \001(\0132\036.dtprot"
  "o.geometry_msgs.Point3d\022=\n\025velWorld2Body"
  "WrtWorld\030\004 \001(\0132\036.dtproto.geometry_msgs.P"
  "oint3d\022<\n\026eulerAngleBodyWrtWorld\030\005 \001(\0132\034"
  ".dtproto.geometry_msgs.Euler\022<\n\026angularV"
  "elBodyWrtWorld\030\006 \001(\0132\034.dtproto.geometry_"
  "msgs.Euler\022;\n\025angularVelBodyWrtBody\030\007 \001("
  "\0132\034.dtproto.geometry_msgs.Euler\022C\n\033angul"
  "arMomentumBodyWrtWorld\030\010 \001(\0132\036.dtproto.g"
  "eometry_msgs.Point3d\022=\n\025posWorld2FootWrt"
  "World\030\t \003(\0132\036.dtproto.geometry_msgs.Poin"
  "t3d\022=\n\025velWorld2FootWrtWorld\030\n \003(\0132\036.dtp"
  "roto.geometry_msgs.Point3d\022<\n\024posBody2Fo"
  "otWrtWorld\030\013 \003(\0132\036.dtproto.geometry_msgs"
  ".Point3d\022<\n\024velBody2FootWrtWorld\030\014 \003(\0132\036"
  ".dtproto.geometry_msgs.Point3d\022;\n\023posBod"
  "y2FootWrtBody\030\r \003(\0132\036.dtproto.geometry_m"
  "sgs.Point3d\022;\n\023velBody2FootWrtBody\030\016 \003(\013"
  "2\036.dtproto.geometry_msgs.Point3d\022\?\n\027forc"
  "eWorld2FootWrtWorld\030\017 \003(\0132\036.dtproto.geom"
  "etry_msgs.Point3d\0228\n\017rotBodyWrtWorld\030\020 \001"
  "(\0132\037.dtproto.geometry_msgs.Matrix3d\0220\n\007c"
  "ontact\030\021 \001(\0132\037.dtproto.geometry_msgs.Vec"
  "tor4b\022;\n\023posCtrl2ComWrtWorld\030\022 \001(\0132\036.dtp"
  "roto.geometry_msgs.Point3d\022;\n\023velCtrl2Co"
  "mWrtWorld\030\023 \001(\0132\036.dtproto.geometry_msgs."
  "Point3d\"\232\006\n\010CpgState\0220\n\007periods\030\001 \001(\0132\037."
  "dtproto.geometry_msgs.Vector2d\022/\n\006phases"
  "\030\002 \001(\0132\037.dtproto.geometry_msgs.Vector4d\022"
  ",\n\003phi\030\003 \001(\0132\037.dtproto.geometry_msgs.Vec"
  "tor4d\0220\n\007phiToGo\030\004 \001(\0132\037.dtproto.geometr"
  "y_msgs.Vector4d\022.\n\005phiSt\030\005 \001(\0132\037.dtproto"
  ".geometry_msgs.Vector4d\022.\n\005phiSw\030\006 \001(\0132\037"
  ".dtproto.geometry_msgs.Vector4d\022,\n\003cpg\030\007"
  " \001(\0132\037.dtproto.geometry_msgs.Vector4d\0220\n"
  "\007contact\030\010 \001(\0132\037.dtproto.geometry_msgs.V"
  "ector4b\0228\n\017phaseChangeFlag\030\t \001(\0132\037.dtpro"
  "to.geometry_msgs.Vector4b\0229\n\020periodChang"
  "eFlag\030\n \001(\0132\037.dtproto.geometry_msgs.Vect"
  "or4b\0222\n\tphaseDiff\030\013 \001(\0132\037.dtproto.geomet"
  "ry_msgs.Vector4d\0220\n\007phiTran\030\014 \001(\0132\037.dtpr"
  "oto.geometry_msgs.Vector4d\0222\n\tphiTranSt\030"
  "\r \001(\0132\037.dtproto.geometry_msgs.Vector4d\0222"
  "\n\tphiTranSw\030\016 \001(\0132\037.dtproto.geometry_msg"
  "s.Vector4d\022/\n\004step\030\017 \001(\0132!.dtproto.geome"
  "try_msgs.Vector4i32\022\n\n\002dt\030\020 \001(\001\022\013\n\003air\030\021"
  " \001(\010\"\342\004\n\014LeoQuadState\022/\n\njointState\030\001 \003("
  "\0132\033.dtproto.leoquad.JointState\0220\n\014actJoi"
  "ntData\030\002 \003(\0132\032.dtproto.leoquad.JointData"
  "\0220\n\014desJointData\030\003 \003(\0132\032.dtproto.leoquad"
  ".JointData\0220\n\014desTaskState\030\004 \001(\0132\032.dtpro"
  "to.leoquad.TaskState\0220\n\014actTaskState\030\005 \001"
  "(\0132\032.dtproto.leoquad.TaskState\022%\n\003imu\030\006 "
  "\001(\0132\030.dtproto.sensor_msgs.Imu\022*\n\010joystic"
  "k\030\007 \001(\0132\030.dtproto.sensor_msgs.Joy\0226\n\017act"
  "ControlState\030\010 \001(\0132\035.dtproto.leoquad.Con"
  "trolState\0226\n\017desControlState\030\t \001(\0132\035.dtp"
  "roto.leoquad.ControlState\022+\n\010cpgState\030\n "
  "\001(\0132\031.dtproto.leoquad.CpgState\0221\n\013thread"
  "State\030\013 \001(\0132\034.dtproto.leoquad.ThreadStat"
  "e\0226\n\016arbitraryState\030\024 \001(\0132\036.dtproto.std_"
  "msgs.PackedDouble\"q\n\027LeoQuadStateTimeSta"
  "mped\022(\n\006header\030\001 \001(\0132\030.dtproto.std_msgs."
  "Header\022,\n\005state\030\002 \001(\0132\035.dtproto.leoquad."
  "LeoQuadStateb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_LeoQuad_2eproto_deps[9] = {
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto,
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto,
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fPoint_2eproto,
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto,
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fWrench_2eproto,
  &::descriptor_table_dtProto_2fsensor_5fmsgs_2fImu_2eproto,
  &::descriptor_table_dtProto_2fsensor_5fmsgs_2fJoy_2eproto,
  &::descriptor_table_dtProto_2fstd_5fmsgs_2fHeader_2eproto,
  &::descriptor_table_dtProto_2fstd_5fmsgs_2fPackedArray_2eproto,
};
static ::_pbi::once_flag descriptor_table_LeoQuad_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_LeoQuad_2eproto = {
    false, false, 3940, descriptor_table_protodef_LeoQuad_2eproto,
    "LeoQuad.proto",
    &descriptor_table_LeoQuad_2eproto_once, descriptor_table_LeoQuad_2eproto_deps, 9, 8,
    schemas, file_default_instances, TableStruct_LeoQuad_2eproto::offsets,
    file_level_metadata_LeoQuad_2eproto, file_level_enum_descriptors_LeoQuad_2eproto,
    file_level_service_descriptors_LeoQuad_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_LeoQuad_2eproto_getter() {
  return &descriptor_table_LeoQuad_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_LeoQuad_2eproto(&descriptor_table_LeoQuad_2eproto);
namespace dtproto {
namespace leoquad {

// ===================================================================

class ThreadState::_Internal {
 public:
};

ThreadState::ThreadState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.leoquad.ThreadState)
}
ThreadState::ThreadState(const ThreadState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThreadState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ctrlperiod_ms_){}
    , decltype(_impl_.ctrlload_ms_){}
    , decltype(_impl_.mpcperiod_ms_){}
    , decltype(_impl_.mpcload_ms_){}
    , decltype(_impl_.imuperiod_ms_){}
    , decltype(_impl_.imuload_ms_){}
    , decltype(_impl_.joystickperiod_ms_){}
    , decltype(_impl_.joystickload_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ctrlperiod_ms_, &from._impl_.ctrlperiod_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.joystickload_ms_) -
    reinterpret_cast<char*>(&_impl_.ctrlperiod_ms_)) + sizeof(_impl_.joystickload_ms_));
  // @@protoc_insertion_point(copy_constructor:dtproto.leoquad.ThreadState)
}

inline void ThreadState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ctrlperiod_ms_){0}
    , decltype(_impl_.ctrlload_ms_){0}
    , decltype(_impl_.mpcperiod_ms_){0}
    , decltype(_impl_.mpcload_ms_){0}
    , decltype(_impl_.imuperiod_ms_){0}
    , decltype(_impl_.imuload_ms_){0}
    , decltype(_impl_.joystickperiod_ms_){0}
    , decltype(_impl_.joystickload_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ThreadState::~ThreadState() {
  // @@protoc_insertion_point(destructor:dtproto.leoquad.ThreadState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThreadState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThreadState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThreadState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.leoquad.ThreadState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ctrlperiod_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.joystickload_ms_) -
      reinterpret_cast<char*>(&_impl_.ctrlperiod_ms_)) + sizeof(_impl_.joystickload_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreadState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double ctrlPeriod_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.ctrlperiod_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ctrlLoad_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.ctrlload_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double mpcPeriod_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.mpcperiod_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double mpcLoad_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.mpcload_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double imuPeriod_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.imuperiod_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double imuLoad_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.imuload_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double joystickPeriod_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.joystickperiod_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double joystickLoad_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.joystickload_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThreadState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.leoquad.ThreadState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double ctrlPeriod_ms = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlperiod_ms = this->_internal_ctrlperiod_ms();
  uint64_t raw_ctrlperiod_ms;
  memcpy(&raw_ctrlperiod_ms, &tmp_ctrlperiod_ms, sizeof(tmp_ctrlperiod_ms));
  if (raw_ctrlperiod_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_ctrlperiod_ms(), target);
  }

  // double ctrlLoad_ms = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlload_ms = this->_internal_ctrlload_ms();
  uint64_t raw_ctrlload_ms;
  memcpy(&raw_ctrlload_ms, &tmp_ctrlload_ms, sizeof(tmp_ctrlload_ms));
  if (raw_ctrlload_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_ctrlload_ms(), target);
  }

  // double mpcPeriod_ms = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mpcperiod_ms = this->_internal_mpcperiod_ms();
  uint64_t raw_mpcperiod_ms;
  memcpy(&raw_mpcperiod_ms, &tmp_mpcperiod_ms, sizeof(tmp_mpcperiod_ms));
  if (raw_mpcperiod_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_mpcperiod_ms(), target);
  }

  // double mpcLoad_ms = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mpcload_ms = this->_internal_mpcload_ms();
  uint64_t raw_mpcload_ms;
  memcpy(&raw_mpcload_ms, &tmp_mpcload_ms, sizeof(tmp_mpcload_ms));
  if (raw_mpcload_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_mpcload_ms(), target);
  }

  // double imuPeriod_ms = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_imuperiod_ms = this->_internal_imuperiod_ms();
  uint64_t raw_imuperiod_ms;
  memcpy(&raw_imuperiod_ms, &tmp_imuperiod_ms, sizeof(tmp_imuperiod_ms));
  if (raw_imuperiod_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_imuperiod_ms(), target);
  }

  // double imuLoad_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_imuload_ms = this->_internal_imuload_ms();
  uint64_t raw_imuload_ms;
  memcpy(&raw_imuload_ms, &tmp_imuload_ms, sizeof(tmp_imuload_ms));
  if (raw_imuload_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_imuload_ms(), target);
  }

  // double joystickPeriod_ms = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_joystickperiod_ms = this->_internal_joystickperiod_ms();
  uint64_t raw_joystickperiod_ms;
  memcpy(&raw_joystickperiod_ms, &tmp_joystickperiod_ms, sizeof(tmp_joystickperiod_ms));
  if (raw_joystickperiod_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_joystickperiod_ms(), target);
  }

  // double joystickLoad_ms = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_joystickload_ms = this->_internal_joystickload_ms();
  uint64_t raw_joystickload_ms;
  memcpy(&raw_joystickload_ms, &tmp_joystickload_ms, sizeof(tmp_joystickload_ms));
  if (raw_joystickload_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_joystickload_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.leoquad.ThreadState)
  return target;
}

size_t ThreadState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.leoquad.ThreadState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ctrlPeriod_ms = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlperiod_ms = this->_internal_ctrlperiod_ms();
  uint64_t raw_ctrlperiod_ms;
  memcpy(&raw_ctrlperiod_ms, &tmp_ctrlperiod_ms, sizeof(tmp_ctrlperiod_ms));
  if (raw_ctrlperiod_ms != 0) {
    total_size += 1 + 8;
  }

  // double ctrlLoad_ms = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlload_ms = this->_internal_ctrlload_ms();
  uint64_t raw_ctrlload_ms;
  memcpy(&raw_ctrlload_ms, &tmp_ctrlload_ms, sizeof(tmp_ctrlload_ms));
  if (raw_ctrlload_ms != 0) {
    total_size += 1 + 8;
  }

  // double mpcPeriod_ms = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mpcperiod_ms = this->_internal_mpcperiod_ms();
  uint64_t raw_mpcperiod_ms;
  memcpy(&raw_mpcperiod_ms, &tmp_mpcperiod_ms, sizeof(tmp_mpcperiod_ms));
  if (raw_mpcperiod_ms != 0) {
    total_size += 1 + 8;
  }

  // double mpcLoad_ms = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mpcload_ms = this->_internal_mpcload_ms();
  uint64_t raw_mpcload_ms;
  memcpy(&raw_mpcload_ms, &tmp_mpcload_ms, sizeof(tmp_mpcload_ms));
  if (raw_mpcload_ms != 0) {
    total_size += 1 + 8;
  }

  // double imuPeriod_ms = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_imuperiod_ms = this->_internal_imuperiod_ms();
  uint64_t raw_imuperiod_ms;
  memcpy(&raw_imuperiod_ms, &tmp_imuperiod_ms, sizeof(tmp_imuperiod_ms));
  if (raw_imuperiod_ms != 0) {
    total_size += 1 + 8;
  }

  // double imuLoad_ms = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_imuload_ms = this->_internal_imuload_ms();
  uint64_t raw_imuload_ms;
  memcpy(&raw_imuload_ms, &tmp_imuload_ms, sizeof(tmp_imuload_ms));
  if (raw_imuload_ms != 0) {
    total_size += 1 + 8;
  }

  // double joystickPeriod_ms = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_joystickperiod_ms = this->_internal_joystickperiod_ms();
  uint64_t raw_joystickperiod_ms;
  memcpy(&raw_joystickperiod_ms, &tmp_joystickperiod_ms, sizeof(tmp_joystickperiod_ms));
  if (raw_joystickperiod_ms != 0) {
    total_size += 1 + 8;
  }

  // double joystickLoad_ms = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_joystickload_ms = this->_internal_joystickload_ms();
  uint64_t raw_joystickload_ms;
  memcpy(&raw_joystickload_ms, &tmp_joystickload_ms, sizeof(tmp_joystickload_ms));
  if (raw_joystickload_ms != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThreadState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThreadState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThreadState::GetClassData() const { return &_class_data_; }


void ThreadState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThreadState*>(&to_msg);
  auto& from = static_cast<const ThreadState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.leoquad.ThreadState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlperiod_ms = from._internal_ctrlperiod_ms();
  uint64_t raw_ctrlperiod_ms;
  memcpy(&raw_ctrlperiod_ms, &tmp_ctrlperiod_ms, sizeof(tmp_ctrlperiod_ms));
  if (raw_ctrlperiod_ms != 0) {
    _this->_internal_set_ctrlperiod_ms(from._internal_ctrlperiod_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ctrlload_ms = from._internal_ctrlload_ms();
  uint64_t raw_ctrlload_ms;
  memcpy(&raw_ctrlload_ms, &tmp_ctrlload_ms, sizeof(tmp_ctrlload_ms));
  if (raw_ctrlload_ms != 0) {
    _this->_internal_set_ctrlload_ms(from._internal_ctrlload_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mpcperiod_ms = from._internal_mpcperiod_ms();
  uint64_t raw_mpcperiod_ms;
  memcpy(&raw_mpcperiod_ms, &tmp_mpcperiod_ms, sizeof(tmp_mpcperiod_ms));
  if (raw_mpcperiod_ms != 0) {
    _this->_internal_set_mpcperiod_ms(from._internal_mpcperiod_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mpcload_ms = from._internal_mpcload_ms();
  uint64_t raw_mpcload_ms;
  memcpy(&raw_mpcload_ms, &tmp_mpcload_ms, sizeof(tmp_mpcload_ms));
  if (raw_mpcload_ms != 0) {
    _this->_internal_set_mpcload_ms(from._internal_mpcload_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_imuperiod_ms = from._internal_imuperiod_ms();
  uint64_t raw_imuperiod_ms;
  memcpy(&raw_imuperiod_ms, &tmp_imuperiod_ms, sizeof(tmp_imuperiod_ms));
  if (raw_imuperiod_ms != 0) {
    _this->_internal_set_imuperiod_ms(from._internal_imuperiod_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_imuload_ms = from._internal_imuload_ms();
  uint64_t raw_imuload_ms;
  memcpy(&raw_imuload_ms, &tmp_imuload_ms, sizeof(tmp_imuload_ms));
  if (raw_imuload_ms != 0) {
    _this->_internal_set_imuload_ms(from._internal_imuload_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_joystickperiod_ms = from._internal_joystickperiod_ms();
  uint64_t raw_joystickperiod_ms;
  memcpy(&raw_joystickperiod_ms, &tmp_joystickperiod_ms, sizeof(tmp_joystickperiod_ms));
  if (raw_joystickperiod_ms != 0) {
    _this->_internal_set_joystickperiod_ms(from._internal_joystickperiod_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_joystickload_ms = from._internal_joystickload_ms();
  uint64_t raw_joystickload_ms;
  memcpy(&raw_joystickload_ms, &tmp_joystickload_ms, sizeof(tmp_joystickload_ms));
  if (raw_joystickload_ms != 0) {
    _this->_internal_set_joystickload_ms(from._internal_joystickload_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadState::CopyFrom(const ThreadState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.leoquad.ThreadState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadState::IsInitialized() const {
  return true;
}

void ThreadState::InternalSwap(ThreadState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThreadState, _impl_.joystickload_ms_)
      + sizeof(ThreadState::_impl_.joystickload_ms_)
      - PROTOBUF_FIELD_OFFSET(ThreadState, _impl_.ctrlperiod_ms_)>(
          reinterpret_cast<char*>(&_impl_.ctrlperiod_ms_),
          reinterpret_cast<char*>(&other->_impl_.ctrlperiod_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreadState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LeoQuad_2eproto_getter, &descriptor_table_LeoQuad_2eproto_once,
      file_level_metadata_LeoQuad_2eproto[0]);
}

// ===================================================================

class TaskState::_Internal {
 public:
  static const ::dtproto::geometry_msgs::Point3d& pos(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Rotation& rot(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& linvel(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& angvel(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& force(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Point3d& moment(const TaskState* msg);
  static const ::dtproto::geometry_msgs::Wrench& wrench(const TaskState* msg);
};

const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::pos(const TaskState* msg) {
  return *msg->_impl_.pos_;
}
const ::dtproto::geometry_msgs::Rotation&
TaskState::_Internal::rot(const TaskState* msg) {
  return *msg->_impl_.rot_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::linvel(const TaskState* msg) {
  return *msg->_impl_.linvel_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::angvel(const TaskState* msg) {
  return *msg->_impl_.angvel_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::force(const TaskState* msg) {
  return *msg->_impl_.force_;
}
const ::dtproto::geometry_msgs::Point3d&
TaskState::_Internal::moment(const TaskState* msg) {
  return *msg->_impl_.moment_;
}
const ::dtproto::geometry_msgs::Wrench&
TaskState::_Internal::wrench(const TaskState* msg) {
  return *msg->_impl_.wrench_;
}
void TaskState::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
void TaskState::clear_rot() {
  if (GetArenaForAllocation() == nullptr && _impl_.rot_ != nullptr) {
    delete _impl_.rot_;
  }
  _impl_.rot_ = nullptr;
}
void TaskState::clear_linvel() {
  if (GetArenaForAllocation() == nullptr && _impl_.linvel_ != nullptr) {
    delete _impl_.linvel_;
  }
  _impl_.linvel_ = nullptr;
}
void TaskState::clear_angvel() {
  if (GetArenaForAllocation() == nullptr && _impl_.angvel_ != nullptr) {
    delete _impl_.angvel_;
  }
  _impl_.angvel_ = nullptr;
}
void TaskState::clear_force() {
  if (GetArenaForAllocation() == nullptr && _impl_.force_ != nullptr) {
    delete _impl_.force_;
  }
  _impl_.force_ = nullptr;
}
void TaskState::clear_moment() {
  if (GetArenaForAllocation() == nullptr && _impl_.moment_ != nullptr) {
    delete _impl_.moment_;
  }
  _impl_.moment_ = nullptr;
}
void TaskState::clear_wrench() {
  if (GetArenaForAllocation() == nullptr && _impl_.wrench_ != nullptr) {
    delete _impl_.wrench_;
  }
  _impl_.wrench_ = nullptr;
}
TaskState::TaskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.leoquad.TaskState)
}
TaskState::TaskState(const TaskState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.rot_){nullptr}
    , decltype(_impl_.linvel_){nullptr}
    , decltype(_impl_.angvel_){nullptr}
    , decltype(_impl_.force_){nullptr}
    , decltype(_impl_.moment_){nullptr}
    , decltype(_impl_.wrench_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.pos_);
  }
  if (from._internal_has_rot()) {
    _this->_impl_.rot_ = new ::dtproto::geometry_msgs::Rotation(*from._impl_.rot_);
  }
  if (from._internal_has_linvel()) {
    _this->_impl_.linvel_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.linvel_);
  }
  if (from._internal_has_angvel()) {
    _this->_impl_.angvel_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.angvel_);
  }
  if (from._internal_has_force()) {
    _this->_impl_.force_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.force_);
  }
  if (from._internal_has_moment()) {
    _this->_impl_.moment_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.moment_);
  }
  if (from._internal_has_wrench()) {
    _this->_impl_.wrench_ = new ::dtproto::geometry_msgs::Wrench(*from._impl_.wrench_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:dtproto.leoquad.TaskState)
}

inline void TaskState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.rot_){nullptr}
    , decltype(_impl_.linvel_){nullptr}
    , decltype(_impl_.angvel_){nullptr}
    , decltype(_impl_.force_){nullptr}
    , decltype(_impl_.moment_){nullptr}
    , decltype(_impl_.wrench_){nullptr}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskState::~TaskState() {
  // @@protoc_insertion_point(destructor:dtproto.leoquad.TaskState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.rot_;
  if (this != internal_default_instance()) delete _impl_.linvel_;
  if (this != internal_default_instance()) delete _impl_.angvel_;
  if (this != internal_default_instance()) delete _impl_.force_;
  if (this != internal_default_instance()) delete _impl_.moment_;
  if (this != internal_default_instance()) delete _impl_.wrench_;
}

void TaskState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.leoquad.TaskState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rot_ != nullptr) {
    delete _impl_.rot_;
  }
  _impl_.rot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.linvel_ != nullptr) {
    delete _impl_.linvel_;
  }
  _impl_.linvel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angvel_ != nullptr) {
    delete _impl_.angvel_;
  }
  _impl_.angvel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.force_ != nullptr) {
    delete _impl_.force_;
  }
  _impl_.force_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.moment_ != nullptr) {
    delete _impl_.moment_;
  }
  _impl_.moment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wrench_ != nullptr) {
    delete _impl_.wrench_;
  }
  _impl_.wrench_ = nullptr;
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.geometry_msgs.Point3d pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Rotation rot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d linVel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linvel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d angVel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angvel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d force = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d moment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_moment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Wrench wrench = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_wrench(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.leoquad.TaskState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point3d pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Rotation rot = 2;
  if (this->_internal_has_rot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rot(this),
        _Internal::rot(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d linVel = 3;
  if (this->_internal_has_linvel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::linvel(this),
        _Internal::linvel(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d angVel = 4;
  if (this->_internal_has_angvel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::angvel(this),
        _Internal::angvel(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d force = 5;
  if (this->_internal_has_force()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::force(this),
        _Internal::force(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d moment = 6;
  if (this->_internal_has_moment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::moment(this),
        _Internal::moment(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Wrench wrench = 7;
  if (this->_internal_has_wrench()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::wrench(this),
        _Internal::wrench(this).GetCachedSize(), target, stream);
  }

  // uint32 id = 8;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.leoquad.TaskState)
  return target;
}

size_t TaskState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.leoquad.TaskState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point3d pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .dtproto.geometry_msgs.Rotation rot = 2;
  if (this->_internal_has_rot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rot_);
  }

  // .dtproto.geometry_msgs.Point3d linVel = 3;
  if (this->_internal_has_linvel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linvel_);
  }

  // .dtproto.geometry_msgs.Point3d angVel = 4;
  if (this->_internal_has_angvel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angvel_);
  }

  // .dtproto.geometry_msgs.Point3d force = 5;
  if (this->_internal_has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.force_);
  }

  // .dtproto.geometry_msgs.Point3d moment = 6;
  if (this->_internal_has_moment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.moment_);
  }

  // .dtproto.geometry_msgs.Wrench wrench = 7;
  if (this->_internal_has_wrench()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wrench_);
  }

  // uint32 id = 8;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskState::GetClassData() const { return &_class_data_; }


void TaskState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskState*>(&to_msg);
  auto& from = static_cast<const TaskState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.leoquad.TaskState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_has_rot()) {
    _this->_internal_mutable_rot()->::dtproto::geometry_msgs::Rotation::MergeFrom(
        from._internal_rot());
  }
  if (from._internal_has_linvel()) {
    _this->_internal_mutable_linvel()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_linvel());
  }
  if (from._internal_has_angvel()) {
    _this->_internal_mutable_angvel()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_angvel());
  }
  if (from._internal_has_force()) {
    _this->_internal_mutable_force()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_force());
  }
  if (from._internal_has_moment()) {
    _this->_internal_mutable_moment()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_moment());
  }
  if (from._internal_has_wrench()) {
    _this->_internal_mutable_wrench()->::dtproto::geometry_msgs::Wrench::MergeFrom(
        from._internal_wrench());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskState::CopyFrom(const TaskState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.leoquad.TaskState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskState::IsInitialized() const {
  return true;
}

void TaskState::InternalSwap(TaskState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskState, _impl_.id_)
      + sizeof(TaskState::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TaskState, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LeoQuad_2eproto_getter, &descriptor_table_LeoQuad_2eproto_once,
      file_level_metadata_LeoQuad_2eproto[1]);
}

// ===================================================================

class JointState::_Internal {
 public:
};

JointState::JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.leoquad.JointState)
}
JointState::JointState(const JointState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JointState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statusword_){}
    , decltype(_impl_.controlword_){}
    , decltype(_impl_.incposofs_cnt_){}
    , decltype(_impl_.absposofs_cnt_){}
    , decltype(_impl_.incpos_cnt_){}
    , decltype(_impl_.abspos_cnt_){}
    , decltype(_impl_.incvel_cps_){}
    , decltype(_impl_.mcutemp_c_){}
    , decltype(_impl_.invtemp_c_){}
    , decltype(_impl_.inputvolt_v_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.statusword_, &from._impl_.statusword_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inputvolt_v_) -
    reinterpret_cast<char*>(&_impl_.statusword_)) + sizeof(_impl_.inputvolt_v_));
  // @@protoc_insertion_point(copy_constructor:dtproto.leoquad.JointState)
}

inline void JointState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.statusword_){0u}
    , decltype(_impl_.controlword_){0u}
    , decltype(_impl_.incposofs_cnt_){0}
    , decltype(_impl_.absposofs_cnt_){0}
    , decltype(_impl_.incpos_cnt_){0}
    , decltype(_impl_.abspos_cnt_){0}
    , decltype(_impl_.incvel_cps_){0}
    , decltype(_impl_.mcutemp_c_){0}
    , decltype(_impl_.invtemp_c_){0}
    , decltype(_impl_.inputvolt_v_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:dtproto.leoquad.JointState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JointState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JointState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.leoquad.JointState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.statusword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inputvolt_v_) -
      reinterpret_cast<char*>(&_impl_.statusword_)) + sizeof(_impl_.inputvolt_v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 statusWord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.statusword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 controlWord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.controlword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incPosOfs_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.incposofs_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 absPosOfs_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.absposofs_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incPos_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.incpos_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 absPos_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.abspos_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 incVel_cps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.incvel_cps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float mcuTemp_C = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.mcutemp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float invTemp_C = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.invtemp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float inputVolt_V = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.inputvolt_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JointState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.leoquad.JointState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->_internal_statusword() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_statusword(), target);
  }

  // uint32 controlWord = 2;
  if (this->_internal_controlword() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_controlword(), target);
  }

  // int32 incPosOfs_cnt = 3;
  if (this->_internal_incposofs_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_incposofs_cnt(), target);
  }

  // int32 absPosOfs_cnt = 4;
  if (this->_internal_absposofs_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_absposofs_cnt(), target);
  }

  // int32 incPos_cnt = 5;
  if (this->_internal_incpos_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_incpos_cnt(), target);
  }

  // int32 absPos_cnt = 6;
  if (this->_internal_abspos_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_abspos_cnt(), target);
  }

  // int32 incVel_cps = 7;
  if (this->_internal_incvel_cps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_incvel_cps(), target);
  }

  // float mcuTemp_C = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mcutemp_c = this->_internal_mcutemp_c();
  uint32_t raw_mcutemp_c;
  memcpy(&raw_mcutemp_c, &tmp_mcutemp_c, sizeof(tmp_mcutemp_c));
  if (raw_mcutemp_c != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_mcutemp_c(), target);
  }

  // float invTemp_C = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_invtemp_c = this->_internal_invtemp_c();
  uint32_t raw_invtemp_c;
  memcpy(&raw_invtemp_c, &tmp_invtemp_c, sizeof(tmp_invtemp_c));
  if (raw_invtemp_c != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_invtemp_c(), target);
  }

  // float inputVolt_V = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inputvolt_v = this->_internal_inputvolt_v();
  uint32_t raw_inputvolt_v;
  memcpy(&raw_inputvolt_v, &tmp_inputvolt_v, sizeof(tmp_inputvolt_v));
  if (raw_inputvolt_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_inputvolt_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.leoquad.JointState)
  return target;
}

size_t JointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.leoquad.JointState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->_internal_statusword() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_statusword());
  }

  // uint32 controlWord = 2;
  if (this->_internal_controlword() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_controlword());
  }

  // int32 incPosOfs_cnt = 3;
  if (this->_internal_incposofs_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_incposofs_cnt());
  }

  // int32 absPosOfs_cnt = 4;
  if (this->_internal_absposofs_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_absposofs_cnt());
  }

  // int32 incPos_cnt = 5;
  if (this->_internal_incpos_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_incpos_cnt());
  }

  // int32 absPos_cnt = 6;
  if (this->_internal_abspos_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_abspos_cnt());
  }

  // int32 incVel_cps = 7;
  if (this->_internal_incvel_cps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_incvel_cps());
  }

  // float mcuTemp_C = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mcutemp_c = this->_internal_mcutemp_c();
  uint32_t raw_mcutemp_c;
  memcpy(&raw_mcutemp_c, &tmp_mcutemp_c, sizeof(tmp_mcutemp_c));
  if (raw_mcutemp_c != 0) {
    total_size += 1 + 4;
  }

  // float invTemp_C = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_invtemp_c = this->_internal_invtemp_c();
  uint32_t raw_invtemp_c;
  memcpy(&raw_invtemp_c, &tmp_invtemp_c, sizeof(tmp_invtemp_c));
  if (raw_invtemp_c != 0) {
    total_size += 1 + 4;
  }

  // float inputVolt_V = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inputvolt_v = this->_internal_inputvolt_v();
  uint32_t raw_inputvolt_v;
  memcpy(&raw_inputvolt_v, &tmp_inputvolt_v, sizeof(tmp_inputvolt_v));
  if (raw_inputvolt_v != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JointState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointState::GetClassData() const { return &_class_data_; }


void JointState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JointState*>(&to_msg);
  auto& from = static_cast<const JointState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.leoquad.JointState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_statusword() != 0) {
    _this->_internal_set_statusword(from._internal_statusword());
  }
  if (from._internal_controlword() != 0) {
    _this->_internal_set_controlword(from._internal_controlword());
  }
  if (from._internal_incposofs_cnt() != 0) {
    _this->_internal_set_incposofs_cnt(from._internal_incposofs_cnt());
  }
  if (from._internal_absposofs_cnt() != 0) {
    _this->_internal_set_absposofs_cnt(from._internal_absposofs_cnt());
  }
  if (from._internal_incpos_cnt() != 0) {
    _this->_internal_set_incpos_cnt(from._internal_incpos_cnt());
  }
  if (from._internal_abspos_cnt() != 0) {
    _this->_internal_set_abspos_cnt(from._internal_abspos_cnt());
  }
  if (from._internal_incvel_cps() != 0) {
    _this->_internal_set_incvel_cps(from._internal_incvel_cps());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mcutemp_c = from._internal_mcutemp_c();
  uint32_t raw_mcutemp_c;
  memcpy(&raw_mcutemp_c, &tmp_mcutemp_c, sizeof(tmp_mcutemp_c));
  if (raw_mcutemp_c != 0) {
    _this->_internal_set_mcutemp_c(from._internal_mcutemp_c());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_invtemp_c = from._internal_invtemp_c();
  uint32_t raw_invtemp_c;
  memcpy(&raw_invtemp_c, &tmp_invtemp_c, sizeof(tmp_invtemp_c));
  if (raw_invtemp_c != 0) {
    _this->_internal_set_invtemp_c(from._internal_invtemp_c());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inputvolt_v = from._internal_inputvolt_v();
  uint32_t raw_inputvolt_v;
  memcpy(&raw_inputvolt_v, &tmp_inputvolt_v, sizeof(tmp_inputvolt_v));
  if (raw_inputvolt_v != 0) {
    _this->_internal_set_inputvolt_v(from._internal_inputvolt_v());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.leoquad.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  return true;
}

void JointState::InternalSwap(JointState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointState, _impl_.inputvolt_v_)
      + sizeof(JointState::_impl_.inputvolt_v_)
      - PROTOBUF_FIELD_OFFSET(JointState, _impl_.statusword_)>(
          reinterpret_cast<char*>(&_impl_.statusword_),
          reinterpret_cast<char*>(&other->_impl_.statusword_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LeoQuad_2eproto_getter, &descriptor_table_LeoQuad_2eproto_once,
      file_level_metadata_LeoQuad_2eproto[2]);
}

// ===================================================================

class JointData::_Internal {
 public:
};

JointData::JointData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.leoquad.JointData)
}
JointData::JointData(const JointData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JointData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_rad_){}
    , decltype(_impl_.posaux_rad_){}
    , decltype(_impl_.vel_rps_){}
    , decltype(_impl_.acc_rpss_){}
    , decltype(_impl_.torq_nm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pos_rad_, &from._impl_.pos_rad_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.torq_nm_) -
    reinterpret_cast<char*>(&_impl_.pos_rad_)) + sizeof(_impl_.torq_nm_));
  // @@protoc_insertion_point(copy_constructor:dtproto.leoquad.JointData)
}

inline void JointData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_rad_){0}
    , decltype(_impl_.posaux_rad_){0}
    , decltype(_impl_.vel_rps_){0}
    , decltype(_impl_.acc_rpss_){0}
    , decltype(_impl_.torq_nm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JointData::~JointData() {
  // @@protoc_insertion_point(destructor:dtproto.leoquad.JointData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JointData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JointData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JointData::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.leoquad.JointData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pos_rad_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.torq_nm_) -
      reinterpret_cast<char*>(&_impl_.pos_rad_)) + sizeof(_impl_.torq_nm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double pos_rad = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.pos_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double posAux_rad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.posaux_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double vel_rps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.vel_rps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acc_rpss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.acc_rpss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double torq_Nm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.torq_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JointData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.leoquad.JointData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double pos_rad = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos_rad = this->_internal_pos_rad();
  uint64_t raw_pos_rad;
  memcpy(&raw_pos_rad, &tmp_pos_rad, sizeof(tmp_pos_rad));
  if (raw_pos_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_pos_rad(), target);
  }

  // double posAux_rad = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_posaux_rad = this->_internal_posaux_rad();
  uint64_t raw_posaux_rad;
  memcpy(&raw_posaux_rad, &tmp_posaux_rad, sizeof(tmp_posaux_rad));
  if (raw_posaux_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_posaux_rad(), target);
  }

  // double vel_rps = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vel_rps = this->_internal_vel_rps();
  uint64_t raw_vel_rps;
  memcpy(&raw_vel_rps, &tmp_vel_rps, sizeof(tmp_vel_rps));
  if (raw_vel_rps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_vel_rps(), target);
  }

  // double acc_rpss = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_rpss = this->_internal_acc_rpss();
  uint64_t raw_acc_rpss;
  memcpy(&raw_acc_rpss, &tmp_acc_rpss, sizeof(tmp_acc_rpss));
  if (raw_acc_rpss != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_acc_rpss(), target);
  }

  // double torq_Nm = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_torq_nm = this->_internal_torq_nm();
  uint64_t raw_torq_nm;
  memcpy(&raw_torq_nm, &tmp_torq_nm, sizeof(tmp_torq_nm));
  if (raw_torq_nm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_torq_nm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.leoquad.JointData)
  return target;
}

size_t JointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.leoquad.JointData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pos_rad = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos_rad = this->_internal_pos_rad();
  uint64_t raw_pos_rad;
  memcpy(&raw_pos_rad, &tmp_pos_rad, sizeof(tmp_pos_rad));
  if (raw_pos_rad != 0) {
    total_size += 1 + 8;
  }

  // double posAux_rad = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_posaux_rad = this->_internal_posaux_rad();
  uint64_t raw_posaux_rad;
  memcpy(&raw_posaux_rad, &tmp_posaux_rad, sizeof(tmp_posaux_rad));
  if (raw_posaux_rad != 0) {
    total_size += 1 + 8;
  }

  // double vel_rps = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vel_rps = this->_internal_vel_rps();
  uint64_t raw_vel_rps;
  memcpy(&raw_vel_rps, &tmp_vel_rps, sizeof(tmp_vel_rps));
  if (raw_vel_rps != 0) {
    total_size += 1 + 8;
  }

  // double acc_rpss = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_rpss = this->_internal_acc_rpss();
  uint64_t raw_acc_rpss;
  memcpy(&raw_acc_rpss, &tmp_acc_rpss, sizeof(tmp_acc_rpss));
  if (raw_acc_rpss != 0) {
    total_size += 1 + 8;
  }

  // double torq_Nm = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_torq_nm = this->_internal_torq_nm();
  uint64_t raw_torq_nm;
  memcpy(&raw_torq_nm, &tmp_torq_nm, sizeof(tmp_torq_nm));
  if (raw_torq_nm != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JointData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointData::GetClassData() const { return &_class_data_; }


void JointData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JointData*>(&to_msg);
  auto& from = static_cast<const JointData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.leoquad.JointData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pos_rad = from._internal_pos_rad();
  uint64_t raw_pos_rad;
  memcpy(&raw_pos_rad, &tmp_pos_rad, sizeof(tmp_pos_rad));
  if (raw_pos_rad != 0) {
    _this->_internal_set_pos_rad(from._internal_pos_rad());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_posaux_rad = from._internal_posaux_rad();
  uint64_t raw_posaux_rad;
  memcpy(&raw_posaux_rad, &tmp_posaux_rad, sizeof(tmp_posaux_rad));
  if (raw_posaux_rad != 0) {
    _this->_internal_set_posaux_rad(from._internal_posaux_rad());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vel_rps = from._internal_vel_rps();
  uint64_t raw_vel_rps;
  memcpy(&raw_vel_rps, &tmp_vel_rps, sizeof(tmp_vel_rps));
  if (raw_vel_rps != 0) {
    _this->_internal_set_vel_rps(from._internal_vel_rps());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_rpss = from._internal_acc_rpss();
  uint64_t raw_acc_rpss;
  memcpy(&raw_acc_rpss, &tmp_acc_rpss, sizeof(tmp_acc_rpss));
  if (raw_acc_rpss != 0) {
    _this->_internal_set_acc_rpss(from._internal_acc_rpss());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_torq_nm = from._internal_torq_nm();
  uint64_t raw_torq_nm;
  memcpy(&raw_torq_nm, &tmp_torq_nm, sizeof(tmp_torq_nm));
  if (raw_torq_nm != 0) {
    _this->_internal_set_torq_nm(from._internal_torq_nm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointData::CopyFrom(const JointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.leoquad.JointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointData::IsInitialized() const {
  return true;
}

void JointData::InternalSwap(JointData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointData, _impl_.torq_nm_)
      + sizeof(JointData::_impl_.torq_nm_)
      - PROTOBUF_FIELD_OFFSET(JointData, _impl_.pos_rad_)>(
          reinterpret_cast<char*>(&_impl_.pos_rad_),
          reinterpret_cast<char*>(&other->_impl_.pos_rad_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LeoQuad_2eproto_getter, &descriptor_table_LeoQuad_2eproto_once,
      file_level_metadata_LeoQuad_2eproto[3]);
}

// ===================================================================

class ControlState::_Internal {
 public:
  static const ::dtproto::geometry_msgs::Point3d& posworld2comwrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& velworld2comwrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& posworld2bodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& velworld2bodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Euler& euleranglebodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Euler& angularvelbodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Euler& angularvelbodywrtbody(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& angularmomentumbodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Matrix3d& rotbodywrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Vector4b& contact(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& posctrl2comwrtworld(const ControlState* msg);
  static const ::dtproto::geometry_msgs::Point3d& velctrl2comwrtworld(const ControlState* msg);
};

const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::posworld2comwrtworld(const ControlState* msg) {
  return *msg->_impl_.posworld2comwrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::velworld2comwrtworld(const ControlState* msg) {
  return *msg->_impl_.velworld2comwrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::posworld2bodywrtworld(const ControlState* msg) {
  return *msg->_impl_.posworld2bodywrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::velworld2bodywrtworld(const ControlState* msg) {
  return *msg->_impl_.velworld2bodywrtworld_;
}
const ::dtproto::geometry_msgs::Euler&
ControlState::_Internal::euleranglebodywrtworld(const ControlState* msg) {
  return *msg->_impl_.euleranglebodywrtworld_;
}
const ::dtproto::geometry_msgs::Euler&
ControlState::_Internal::angularvelbodywrtworld(const ControlState* msg) {
  return *msg->_impl_.angularvelbodywrtworld_;
}
const ::dtproto::geometry_msgs::Euler&
ControlState::_Internal::angularvelbodywrtbody(const ControlState* msg) {
  return *msg->_impl_.angularvelbodywrtbody_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::angularmomentumbodywrtworld(const ControlState* msg) {
  return *msg->_impl_.angularmomentumbodywrtworld_;
}
const ::dtproto::geometry_msgs::Matrix3d&
ControlState::_Internal::rotbodywrtworld(const ControlState* msg) {
  return *msg->_impl_.rotbodywrtworld_;
}
const ::dtproto::geometry_msgs::Vector4b&
ControlState::_Internal::contact(const ControlState* msg) {
  return *msg->_impl_.contact_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::posctrl2comwrtworld(const ControlState* msg) {
  return *msg->_impl_.posctrl2comwrtworld_;
}
const ::dtproto::geometry_msgs::Point3d&
ControlState::_Internal::velctrl2comwrtworld(const ControlState* msg) {
  return *msg->_impl_.velctrl2comwrtworld_;
}
void ControlState::clear_posworld2comwrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.posworld2comwrtworld_ != nullptr) {
    delete _impl_.posworld2comwrtworld_;
  }
  _impl_.posworld2comwrtworld_ = nullptr;
}
void ControlState::clear_velworld2comwrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.velworld2comwrtworld_ != nullptr) {
    delete _impl_.velworld2comwrtworld_;
  }
  _impl_.velworld2comwrtworld_ = nullptr;
}
void ControlState::clear_posworld2bodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.posworld2bodywrtworld_ != nullptr) {
    delete _impl_.posworld2bodywrtworld_;
  }
  _impl_.posworld2bodywrtworld_ = nullptr;
}
void ControlState::clear_velworld2bodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.velworld2bodywrtworld_ != nullptr) {
    delete _impl_.velworld2bodywrtworld_;
  }
  _impl_.velworld2bodywrtworld_ = nullptr;
}
void ControlState::clear_euleranglebodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.euleranglebodywrtworld_ != nullptr) {
    delete _impl_.euleranglebodywrtworld_;
  }
  _impl_.euleranglebodywrtworld_ = nullptr;
}
void ControlState::clear_angularvelbodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtworld_ != nullptr) {
    delete _impl_.angularvelbodywrtworld_;
  }
  _impl_.angularvelbodywrtworld_ = nullptr;
}
void ControlState::clear_angularvelbodywrtbody() {
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtbody_ != nullptr) {
    delete _impl_.angularvelbodywrtbody_;
  }
  _impl_.angularvelbodywrtbody_ = nullptr;
}
void ControlState::clear_angularmomentumbodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.angularmomentumbodywrtworld_ != nullptr) {
    delete _impl_.angularmomentumbodywrtworld_;
  }
  _impl_.angularmomentumbodywrtworld_ = nullptr;
}
void ControlState::clear_posworld2footwrtworld() {
  _impl_.posworld2footwrtworld_.Clear();
}
void ControlState::clear_velworld2footwrtworld() {
  _impl_.velworld2footwrtworld_.Clear();
}
void ControlState::clear_posbody2footwrtworld() {
  _impl_.posbody2footwrtworld_.Clear();
}
void ControlState::clear_velbody2footwrtworld() {
  _impl_.velbody2footwrtworld_.Clear();
}
void ControlState::clear_posbody2footwrtbody() {
  _impl_.posbody2footwrtbody_.Clear();
}
void ControlState::clear_velbody2footwrtbody() {
  _impl_.velbody2footwrtbody_.Clear();
}
void ControlState::clear_forceworld2footwrtworld() {
  _impl_.forceworld2footwrtworld_.Clear();
}
void ControlState::clear_rotbodywrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotbodywrtworld_ != nullptr) {
    delete _impl_.rotbodywrtworld_;
  }
  _impl_.rotbodywrtworld_ = nullptr;
}
void ControlState::clear_contact() {
  if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
    delete _impl_.contact_;
  }
  _impl_.contact_ = nullptr;
}
void ControlState::clear_posctrl2comwrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.posctrl2comwrtworld_ != nullptr) {
    delete _impl_.posctrl2comwrtworld_;
  }
  _impl_.posctrl2comwrtworld_ = nullptr;
}
void ControlState::clear_velctrl2comwrtworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.velctrl2comwrtworld_ != nullptr) {
    delete _impl_.velctrl2comwrtworld_;
  }
  _impl_.velctrl2comwrtworld_ = nullptr;
}
ControlState::ControlState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.leoquad.ControlState)
}
ControlState::ControlState(const ControlState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posworld2footwrtworld_){from._impl_.posworld2footwrtworld_}
    , decltype(_impl_.velworld2footwrtworld_){from._impl_.velworld2footwrtworld_}
    , decltype(_impl_.posbody2footwrtworld_){from._impl_.posbody2footwrtworld_}
    , decltype(_impl_.velbody2footwrtworld_){from._impl_.velbody2footwrtworld_}
    , decltype(_impl_.posbody2footwrtbody_){from._impl_.posbody2footwrtbody_}
    , decltype(_impl_.velbody2footwrtbody_){from._impl_.velbody2footwrtbody_}
    , decltype(_impl_.forceworld2footwrtworld_){from._impl_.forceworld2footwrtworld_}
    , decltype(_impl_.posworld2comwrtworld_){nullptr}
    , decltype(_impl_.velworld2comwrtworld_){nullptr}
    , decltype(_impl_.posworld2bodywrtworld_){nullptr}
    , decltype(_impl_.velworld2bodywrtworld_){nullptr}
    , decltype(_impl_.euleranglebodywrtworld_){nullptr}
    , decltype(_impl_.angularvelbodywrtworld_){nullptr}
    , decltype(_impl_.angularvelbodywrtbody_){nullptr}
    , decltype(_impl_.angularmomentumbodywrtworld_){nullptr}
    , decltype(_impl_.rotbodywrtworld_){nullptr}
    , decltype(_impl_.contact_){nullptr}
    , decltype(_impl_.posctrl2comwrtworld_){nullptr}
    , decltype(_impl_.velctrl2comwrtworld_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_posworld2comwrtworld()) {
    _this->_impl_.posworld2comwrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.posworld2comwrtworld_);
  }
  if (from._internal_has_velworld2comwrtworld()) {
    _this->_impl_.velworld2comwrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.velworld2comwrtworld_);
  }
  if (from._internal_has_posworld2bodywrtworld()) {
    _this->_impl_.posworld2bodywrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.posworld2bodywrtworld_);
  }
  if (from._internal_has_velworld2bodywrtworld()) {
    _this->_impl_.velworld2bodywrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.velworld2bodywrtworld_);
  }
  if (from._internal_has_euleranglebodywrtworld()) {
    _this->_impl_.euleranglebodywrtworld_ = new ::dtproto::geometry_msgs::Euler(*from._impl_.euleranglebodywrtworld_);
  }
  if (from._internal_has_angularvelbodywrtworld()) {
    _this->_impl_.angularvelbodywrtworld_ = new ::dtproto::geometry_msgs::Euler(*from._impl_.angularvelbodywrtworld_);
  }
  if (from._internal_has_angularvelbodywrtbody()) {
    _this->_impl_.angularvelbodywrtbody_ = new ::dtproto::geometry_msgs::Euler(*from._impl_.angularvelbodywrtbody_);
  }
  if (from._internal_has_angularmomentumbodywrtworld()) {
    _this->_impl_.angularmomentumbodywrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.angularmomentumbodywrtworld_);
  }
  if (from._internal_has_rotbodywrtworld()) {
    _this->_impl_.rotbodywrtworld_ = new ::dtproto::geometry_msgs::Matrix3d(*from._impl_.rotbodywrtworld_);
  }
  if (from._internal_has_contact()) {
    _this->_impl_.contact_ = new ::dtproto::geometry_msgs::Vector4b(*from._impl_.contact_);
  }
  if (from._internal_has_posctrl2comwrtworld()) {
    _this->_impl_.posctrl2comwrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.posctrl2comwrtworld_);
  }
  if (from._internal_has_velctrl2comwrtworld()) {
    _this->_impl_.velctrl2comwrtworld_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.velctrl2comwrtworld_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.leoquad.ControlState)
}

inline void ControlState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posworld2footwrtworld_){arena}
    , decltype(_impl_.velworld2footwrtworld_){arena}
    , decltype(_impl_.posbody2footwrtworld_){arena}
    , decltype(_impl_.velbody2footwrtworld_){arena}
    , decltype(_impl_.posbody2footwrtbody_){arena}
    , decltype(_impl_.velbody2footwrtbody_){arena}
    , decltype(_impl_.forceworld2footwrtworld_){arena}
    , decltype(_impl_.posworld2comwrtworld_){nullptr}
    , decltype(_impl_.velworld2comwrtworld_){nullptr}
    , decltype(_impl_.posworld2bodywrtworld_){nullptr}
    , decltype(_impl_.velworld2bodywrtworld_){nullptr}
    , decltype(_impl_.euleranglebodywrtworld_){nullptr}
    , decltype(_impl_.angularvelbodywrtworld_){nullptr}
    , decltype(_impl_.angularvelbodywrtbody_){nullptr}
    , decltype(_impl_.angularmomentumbodywrtworld_){nullptr}
    , decltype(_impl_.rotbodywrtworld_){nullptr}
    , decltype(_impl_.contact_){nullptr}
    , decltype(_impl_.posctrl2comwrtworld_){nullptr}
    , decltype(_impl_.velctrl2comwrtworld_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControlState::~ControlState() {
  // @@protoc_insertion_point(destructor:dtproto.leoquad.ControlState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.posworld2footwrtworld_.~RepeatedPtrField();
  _impl_.velworld2footwrtworld_.~RepeatedPtrField();
  _impl_.posbody2footwrtworld_.~RepeatedPtrField();
  _impl_.velbody2footwrtworld_.~RepeatedPtrField();
  _impl_.posbody2footwrtbody_.~RepeatedPtrField();
  _impl_.velbody2footwrtbody_.~RepeatedPtrField();
  _impl_.forceworld2footwrtworld_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.posworld2comwrtworld_;
  if (this != internal_default_instance()) delete _impl_.velworld2comwrtworld_;
  if (this != internal_default_instance()) delete _impl_.posworld2bodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.velworld2bodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.euleranglebodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.angularvelbodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.angularvelbodywrtbody_;
  if (this != internal_default_instance()) delete _impl_.angularmomentumbodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.rotbodywrtworld_;
  if (this != internal_default_instance()) delete _impl_.contact_;
  if (this != internal_default_instance()) delete _impl_.posctrl2comwrtworld_;
  if (this != internal_default_instance()) delete _impl_.velctrl2comwrtworld_;
}

void ControlState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.leoquad.ControlState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.posworld2footwrtworld_.Clear();
  _impl_.velworld2footwrtworld_.Clear();
  _impl_.posbody2footwrtworld_.Clear();
  _impl_.velbody2footwrtworld_.Clear();
  _impl_.posbody2footwrtbody_.Clear();
  _impl_.velbody2footwrtbody_.Clear();
  _impl_.forceworld2footwrtworld_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.posworld2comwrtworld_ != nullptr) {
    delete _impl_.posworld2comwrtworld_;
  }
  _impl_.posworld2comwrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velworld2comwrtworld_ != nullptr) {
    delete _impl_.velworld2comwrtworld_;
  }
  _impl_.velworld2comwrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posworld2bodywrtworld_ != nullptr) {
    delete _impl_.posworld2bodywrtworld_;
  }
  _impl_.posworld2bodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velworld2bodywrtworld_ != nullptr) {
    delete _impl_.velworld2bodywrtworld_;
  }
  _impl_.velworld2bodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.euleranglebodywrtworld_ != nullptr) {
    delete _impl_.euleranglebodywrtworld_;
  }
  _impl_.euleranglebodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtworld_ != nullptr) {
    delete _impl_.angularvelbodywrtworld_;
  }
  _impl_.angularvelbodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelbodywrtbody_ != nullptr) {
    delete _impl_.angularvelbodywrtbody_;
  }
  _impl_.angularvelbodywrtbody_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angularmomentumbodywrtworld_ != nullptr) {
    delete _impl_.angularmomentumbodywrtworld_;
  }
  _impl_.angularmomentumbodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotbodywrtworld_ != nullptr) {
    delete _impl_.rotbodywrtworld_;
  }
  _impl_.rotbodywrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
    delete _impl_.contact_;
  }
  _impl_.contact_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.posctrl2comwrtworld_ != nullptr) {
    delete _impl_.posctrl2comwrtworld_;
  }
  _impl_.posctrl2comwrtworld_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velctrl2comwrtworld_ != nullptr) {
    delete _impl_.velctrl2comwrtworld_;
  }
  _impl_.velctrl2comwrtworld_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_posworld2comwrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velworld2comwrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_posworld2bodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velworld2bodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_euleranglebodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularvelbodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularvelbodywrtbody(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularmomentumbodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posworld2footwrtworld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_velworld2footwrtworld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posbody2footwrtworld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_velbody2footwrtworld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posbody2footwrtbody(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_velbody2footwrtbody(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d forceWorld2FootWrtWorld = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forceworld2footwrtworld(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotbodywrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4b contact = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d posCtrl2ComWrtWorld = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_posctrl2comwrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d velCtrl2ComWrtWorld = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_velctrl2comwrtworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.leoquad.ControlState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
  if (this->_internal_has_posworld2comwrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::posworld2comwrtworld(this),
        _Internal::posworld2comwrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
  if (this->_internal_has_velworld2comwrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::velworld2comwrtworld(this),
        _Internal::velworld2comwrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
  if (this->_internal_has_posworld2bodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::posworld2bodywrtworld(this),
        _Internal::posworld2bodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
  if (this->_internal_has_velworld2bodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::velworld2bodywrtworld(this),
        _Internal::velworld2bodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
  if (this->_internal_has_euleranglebodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::euleranglebodywrtworld(this),
        _Internal::euleranglebodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
  if (this->_internal_has_angularvelbodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::angularvelbodywrtworld(this),
        _Internal::angularvelbodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
  if (this->_internal_has_angularvelbodywrtbody()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::angularvelbodywrtbody(this),
        _Internal::angularvelbodywrtbody(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
  if (this->_internal_has_angularmomentumbodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::angularmomentumbodywrtworld(this),
        _Internal::angularmomentumbodywrtworld(this).GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_posworld2footwrtworld_size()); i < n; i++) {
    const auto& repfield = this->_internal_posworld2footwrtworld(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_velworld2footwrtworld_size()); i < n; i++) {
    const auto& repfield = this->_internal_velworld2footwrtworld(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_posbody2footwrtworld_size()); i < n; i++) {
    const auto& repfield = this->_internal_posbody2footwrtworld(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_velbody2footwrtworld_size()); i < n; i++) {
    const auto& repfield = this->_internal_velbody2footwrtworld(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_posbody2footwrtbody_size()); i < n; i++) {
    const auto& repfield = this->_internal_posbody2footwrtbody(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_velbody2footwrtbody_size()); i < n; i++) {
    const auto& repfield = this->_internal_velbody2footwrtbody(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d forceWorld2FootWrtWorld = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_forceworld2footwrtworld_size()); i < n; i++) {
    const auto& repfield = this->_internal_forceworld2footwrtworld(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 16;
  if (this->_internal_has_rotbodywrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::rotbodywrtworld(this),
        _Internal::rotbodywrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4b contact = 17;
  if (this->_internal_has_contact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::contact(this),
        _Internal::contact(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d posCtrl2ComWrtWorld = 18;
  if (this->_internal_has_posctrl2comwrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::posctrl2comwrtworld(this),
        _Internal::posctrl2comwrtworld(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d velCtrl2ComWrtWorld = 19;
  if (this->_internal_has_velctrl2comwrtworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::velctrl2comwrtworld(this),
        _Internal::velctrl2comwrtworld(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.leoquad.ControlState)
  return target;
}

size_t ControlState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.leoquad.ControlState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dtproto.geometry_msgs.Point3d posWorld2FootWrtWorld = 9;
  total_size += 1UL * this->_internal_posworld2footwrtworld_size();
  for (const auto& msg : this->_impl_.posworld2footwrtworld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d velWorld2FootWrtWorld = 10;
  total_size += 1UL * this->_internal_velworld2footwrtworld_size();
  for (const auto& msg : this->_impl_.velworld2footwrtworld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtWorld = 11;
  total_size += 1UL * this->_internal_posbody2footwrtworld_size();
  for (const auto& msg : this->_impl_.posbody2footwrtworld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtWorld = 12;
  total_size += 1UL * this->_internal_velbody2footwrtworld_size();
  for (const auto& msg : this->_impl_.velbody2footwrtworld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d posBody2FootWrtBody = 13;
  total_size += 1UL * this->_internal_posbody2footwrtbody_size();
  for (const auto& msg : this->_impl_.posbody2footwrtbody_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d velBody2FootWrtBody = 14;
  total_size += 1UL * this->_internal_velbody2footwrtbody_size();
  for (const auto& msg : this->_impl_.velbody2footwrtbody_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.geometry_msgs.Point3d forceWorld2FootWrtWorld = 15;
  total_size += 1UL * this->_internal_forceworld2footwrtworld_size();
  for (const auto& msg : this->_impl_.forceworld2footwrtworld_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dtproto.geometry_msgs.Point3d posWorld2ComWrtWorld = 1;
  if (this->_internal_has_posworld2comwrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posworld2comwrtworld_);
  }

  // .dtproto.geometry_msgs.Point3d velWorld2ComWrtWorld = 2;
  if (this->_internal_has_velworld2comwrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velworld2comwrtworld_);
  }

  // .dtproto.geometry_msgs.Point3d posWorld2BodyWrtWorld = 3;
  if (this->_internal_has_posworld2bodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posworld2bodywrtworld_);
  }

  // .dtproto.geometry_msgs.Point3d velWorld2BodyWrtWorld = 4;
  if (this->_internal_has_velworld2bodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velworld2bodywrtworld_);
  }

  // .dtproto.geometry_msgs.Euler eulerAngleBodyWrtWorld = 5;
  if (this->_internal_has_euleranglebodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.euleranglebodywrtworld_);
  }

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtWorld = 6;
  if (this->_internal_has_angularvelbodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularvelbodywrtworld_);
  }

  // .dtproto.geometry_msgs.Euler angularVelBodyWrtBody = 7;
  if (this->_internal_has_angularvelbodywrtbody()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularvelbodywrtbody_);
  }

  // .dtproto.geometry_msgs.Point3d angularMomentumBodyWrtWorld = 8;
  if (this->_internal_has_angularmomentumbodywrtworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularmomentumbodywrtworld_);
  }

  // .dtproto.geometry_msgs.Matrix3d rotBodyWrtWorld = 16;
  if (this->_internal_has_rotbodywrtworld()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotbodywrtworld_);
  }

  // .dtproto.geometry_msgs.Vector4b contact = 17;
  if (this->_internal_has_contact()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contact_);
  }

  // .dtproto.geometry_msgs.Point3d posCtrl2ComWrtWorld = 18;
  if (this->_internal_has_posctrl2comwrtworld()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.posctrl2comwrtworld_);
  }

  // .dtproto.geometry_msgs.Point3d velCtrl2ComWrtWorld = 19;
  if (this->_internal_has_velctrl2comwrtworld()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velctrl2comwrtworld_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlState::GetClassData() const { return &_class_data_; }


void ControlState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlState*>(&to_msg);
  auto& from = static_cast<const ControlState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.leoquad.ControlState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.posworld2footwrtworld_.MergeFrom(from._impl_.posworld2footwrtworld_);
  _this->_impl_.velworld2footwrtworld_.MergeFrom(from._impl_.velworld2footwrtworld_);
  _this->_impl_.posbody2footwrtworld_.MergeFrom(from._impl_.posbody2footwrtworld_);
  _this->_impl_.velbody2footwrtworld_.MergeFrom(from._impl_.velbody2footwrtworld_);
  _this->_impl_.posbody2footwrtbody_.MergeFrom(from._impl_.posbody2footwrtbody_);
  _this->_impl_.velbody2footwrtbody_.MergeFrom(from._impl_.velbody2footwrtbody_);
  _this->_impl_.forceworld2footwrtworld_.MergeFrom(from._impl_.forceworld2footwrtworld_);
  if (from._internal_has_posworld2comwrtworld()) {
    _this->_internal_mutable_posworld2comwrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_posworld2comwrtworld());
  }
  if (from._internal_has_velworld2comwrtworld()) {
    _this->_internal_mutable_velworld2comwrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_velworld2comwrtworld());
  }
  if (from._internal_has_posworld2bodywrtworld()) {
    _this->_internal_mutable_posworld2bodywrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_posworld2bodywrtworld());
  }
  if (from._internal_has_velworld2bodywrtworld()) {
    _this->_internal_mutable_velworld2bodywrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_velworld2bodywrtworld());
  }
  if (from._internal_has_euleranglebodywrtworld()) {
    _this->_internal_mutable_euleranglebodywrtworld()->::dtproto::geometry_msgs::Euler::MergeFrom(
        from._internal_euleranglebodywrtworld());
  }
  if (from._internal_has_angularvelbodywrtworld()) {
    _this->_internal_mutable_angularvelbodywrtworld()->::dtproto::geometry_msgs::Euler::MergeFrom(
        from._internal_angularvelbodywrtworld());
  }
  if (from._internal_has_angularvelbodywrtbody()) {
    _this->_internal_mutable_angularvelbodywrtbody()->::dtproto::geometry_msgs::Euler::MergeFrom(
        from._internal_angularvelbodywrtbody());
  }
  if (from._internal_has_angularmomentumbodywrtworld()) {
    _this->_internal_mutable_angularmomentumbodywrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_angularmomentumbodywrtworld());
  }
  if (from._internal_has_rotbodywrtworld()) {
    _this->_internal_mutable_rotbodywrtworld()->::dtproto::geometry_msgs::Matrix3d::MergeFrom(
        from._internal_rotbodywrtworld());
  }
  if (from._internal_has_contact()) {
    _this->_internal_mutable_contact()->::dtproto::geometry_msgs::Vector4b::MergeFrom(
        from._internal_contact());
  }
  if (from._internal_has_posctrl2comwrtworld()) {
    _this->_internal_mutable_posctrl2comwrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_posctrl2comwrtworld());
  }
  if (from._internal_has_velctrl2comwrtworld()) {
    _this->_internal_mutable_velctrl2comwrtworld()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_velctrl2comwrtworld());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlState::CopyFrom(const ControlState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.leoquad.ControlState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlState::IsInitialized() const {
  return true;
}

void ControlState::InternalSwap(ControlState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.posworld2footwrtworld_.InternalSwap(&other->_impl_.posworld2footwrtworld_);
  _impl_.velworld2footwrtworld_.InternalSwap(&other->_impl_.velworld2footwrtworld_);
  _impl_.posbody2footwrtworld_.InternalSwap(&other->_impl_.posbody2footwrtworld_);
  _impl_.velbody2footwrtworld_.InternalSwap(&other->_impl_.velbody2footwrtworld_);
  _impl_.posbody2footwrtbody_.InternalSwap(&other->_impl_.posbody2footwrtbody_);
  _impl_.velbody2footwrtbody_.InternalSwap(&other->_impl_.velbody2footwrtbody_);
  _impl_.forceworld2footwrtworld_.InternalSwap(&other->_impl_.forceworld2footwrtworld_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlState, _impl_.velctrl2comwrtworld_)
      + sizeof(ControlState::_impl_.velctrl2comwrtworld_)
      - PROTOBUF_FIELD_OFFSET(ControlState, _impl_.posworld2comwrtworld_)>(
          reinterpret_cast<char*>(&_impl_.posworld2comwrtworld_),
          reinterpret_cast<char*>(&other->_impl_.posworld2comwrtworld_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LeoQuad_2eproto_getter, &descriptor_table_LeoQuad_2eproto_once,
      file_level_metadata_LeoQuad_2eproto[4]);
}

// ===================================================================

class CpgState::_Internal {
 public:
  static const ::dtproto::geometry_msgs::Vector2d& periods(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& phases(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& phi(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& phitogo(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& phist(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& phisw(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& cpg(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4b& contact(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4b& phasechangeflag(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4b& periodchangeflag(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& phasediff(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& phitran(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& phitranst(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4d& phitransw(const CpgState* msg);
  static const ::dtproto::geometry_msgs::Vector4i32& step(const CpgState* msg);
};

const ::dtproto::geometry_msgs::Vector2d&
CpgState::_Internal::periods(const CpgState* msg) {
  return *msg->_impl_.periods_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phases(const CpgState* msg) {
  return *msg->_impl_.phases_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phi(const CpgState* msg) {
  return *msg->_impl_.phi_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phitogo(const CpgState* msg) {
  return *msg->_impl_.phitogo_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phist(const CpgState* msg) {
  return *msg->_impl_.phist_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phisw(const CpgState* msg) {
  return *msg->_impl_.phisw_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::cpg(const CpgState* msg) {
  return *msg->_impl_.cpg_;
}
const ::dtproto::geometry_msgs::Vector4b&
CpgState::_Internal::contact(const CpgState* msg) {
  return *msg->_impl_.contact_;
}
const ::dtproto::geometry_msgs::Vector4b&
CpgState::_Internal::phasechangeflag(const CpgState* msg) {
  return *msg->_impl_.phasechangeflag_;
}
const ::dtproto::geometry_msgs::Vector4b&
CpgState::_Internal::periodchangeflag(const CpgState* msg) {
  return *msg->_impl_.periodchangeflag_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phasediff(const CpgState* msg) {
  return *msg->_impl_.phasediff_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phitran(const CpgState* msg) {
  return *msg->_impl_.phitran_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phitranst(const CpgState* msg) {
  return *msg->_impl_.phitranst_;
}
const ::dtproto::geometry_msgs::Vector4d&
CpgState::_Internal::phitransw(const CpgState* msg) {
  return *msg->_impl_.phitransw_;
}
const ::dtproto::geometry_msgs::Vector4i32&
CpgState::_Internal::step(const CpgState* msg) {
  return *msg->_impl_.step_;
}
void CpgState::clear_periods() {
  if (GetArenaForAllocation() == nullptr && _impl_.periods_ != nullptr) {
    delete _impl_.periods_;
  }
  _impl_.periods_ = nullptr;
}
void CpgState::clear_phases() {
  if (GetArenaForAllocation() == nullptr && _impl_.phases_ != nullptr) {
    delete _impl_.phases_;
  }
  _impl_.phases_ = nullptr;
}
void CpgState::clear_phi() {
  if (GetArenaForAllocation() == nullptr && _impl_.phi_ != nullptr) {
    delete _impl_.phi_;
  }
  _impl_.phi_ = nullptr;
}
void CpgState::clear_phitogo() {
  if (GetArenaForAllocation() == nullptr && _impl_.phitogo_ != nullptr) {
    delete _impl_.phitogo_;
  }
  _impl_.phitogo_ = nullptr;
}
void CpgState::clear_phist() {
  if (GetArenaForAllocation() == nullptr && _impl_.phist_ != nullptr) {
    delete _impl_.phist_;
  }
  _impl_.phist_ = nullptr;
}
void CpgState::clear_phisw() {
  if (GetArenaForAllocation() == nullptr && _impl_.phisw_ != nullptr) {
    delete _impl_.phisw_;
  }
  _impl_.phisw_ = nullptr;
}
void CpgState::clear_cpg() {
  if (GetArenaForAllocation() == nullptr && _impl_.cpg_ != nullptr) {
    delete _impl_.cpg_;
  }
  _impl_.cpg_ = nullptr;
}
void CpgState::clear_contact() {
  if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
    delete _impl_.contact_;
  }
  _impl_.contact_ = nullptr;
}
void CpgState::clear_phasechangeflag() {
  if (GetArenaForAllocation() == nullptr && _impl_.phasechangeflag_ != nullptr) {
    delete _impl_.phasechangeflag_;
  }
  _impl_.phasechangeflag_ = nullptr;
}
void CpgState::clear_periodchangeflag() {
  if (GetArenaForAllocation() == nullptr && _impl_.periodchangeflag_ != nullptr) {
    delete _impl_.periodchangeflag_;
  }
  _impl_.periodchangeflag_ = nullptr;
}
void CpgState::clear_phasediff() {
  if (GetArenaForAllocation() == nullptr && _impl_.phasediff_ != nullptr) {
    delete _impl_.phasediff_;
  }
  _impl_.phasediff_ = nullptr;
}
void CpgState::clear_phitran() {
  if (GetArenaForAllocation() == nullptr && _impl_.phitran_ != nullptr) {
    delete _impl_.phitran_;
  }
  _impl_.phitran_ = nullptr;
}
void CpgState::clear_phitranst() {
  if (GetArenaForAllocation() == nullptr && _impl_.phitranst_ != nullptr) {
    delete _impl_.phitranst_;
  }
  _impl_.phitranst_ = nullptr;
}
void CpgState::clear_phitransw() {
  if (GetArenaForAllocation() == nullptr && _impl_.phitransw_ != nullptr) {
    delete _impl_.phitransw_;
  }
  _impl_.phitransw_ = nullptr;
}
void CpgState::clear_step() {
  if (GetArenaForAllocation() == nullptr && _impl_.step_ != nullptr) {
    delete _impl_.step_;
  }
  _impl_.step_ = nullptr;
}
CpgState::CpgState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.leoquad.CpgState)
}
CpgState::CpgState(const CpgState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CpgState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.periods_){nullptr}
    , decltype(_impl_.phases_){nullptr}
    , decltype(_impl_.phi_){nullptr}
    , decltype(_impl_.phitogo_){nullptr}
    , decltype(_impl_.phist_){nullptr}
    , decltype(_impl_.phisw_){nullptr}
    , decltype(_impl_.cpg_){nullptr}
    , decltype(_impl_.contact_){nullptr}
    , decltype(_impl_.phasechangeflag_){nullptr}
    , decltype(_impl_.periodchangeflag_){nullptr}
    , decltype(_impl_.phasediff_){nullptr}
    , decltype(_impl_.phitran_){nullptr}
    , decltype(_impl_.phitranst_){nullptr}
    , decltype(_impl_.phitransw_){nullptr}
    , decltype(_impl_.step_){nullptr}
    , decltype(_impl_.dt_){}
    , decltype(_impl_.air_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_periods()) {
    _this->_impl_.periods_ = new ::dtproto::geometry_msgs::Vector2d(*from._impl_.periods_);
  }
  if (from._internal_has_phases()) {
    _this->_impl_.phases_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phases_);
  }
  if (from._internal_has_phi()) {
    _this->_impl_.phi_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phi_);
  }
  if (from._internal_has_phitogo()) {
    _this->_impl_.phitogo_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phitogo_);
  }
  if (from._internal_has_phist()) {
    _this->_impl_.phist_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phist_);
  }
  if (from._internal_has_phisw()) {
    _this->_impl_.phisw_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phisw_);
  }
  if (from._internal_has_cpg()) {
    _this->_impl_.cpg_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.cpg_);
  }
  if (from._internal_has_contact()) {
    _this->_impl_.contact_ = new ::dtproto::geometry_msgs::Vector4b(*from._impl_.contact_);
  }
  if (from._internal_has_phasechangeflag()) {
    _this->_impl_.phasechangeflag_ = new ::dtproto::geometry_msgs::Vector4b(*from._impl_.phasechangeflag_);
  }
  if (from._internal_has_periodchangeflag()) {
    _this->_impl_.periodchangeflag_ = new ::dtproto::geometry_msgs::Vector4b(*from._impl_.periodchangeflag_);
  }
  if (from._internal_has_phasediff()) {
    _this->_impl_.phasediff_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phasediff_);
  }
  if (from._internal_has_phitran()) {
    _this->_impl_.phitran_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phitran_);
  }
  if (from._internal_has_phitranst()) {
    _this->_impl_.phitranst_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phitranst_);
  }
  if (from._internal_has_phitransw()) {
    _this->_impl_.phitransw_ = new ::dtproto::geometry_msgs::Vector4d(*from._impl_.phitransw_);
  }
  if (from._internal_has_step()) {
    _this->_impl_.step_ = new ::dtproto::geometry_msgs::Vector4i32(*from._impl_.step_);
  }
  ::memcpy(&_impl_.dt_, &from._impl_.dt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.air_) -
    reinterpret_cast<char*>(&_impl_.dt_)) + sizeof(_impl_.air_));
  // @@protoc_insertion_point(copy_constructor:dtproto.leoquad.CpgState)
}

inline void CpgState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.periods_){nullptr}
    , decltype(_impl_.phases_){nullptr}
    , decltype(_impl_.phi_){nullptr}
    , decltype(_impl_.phitogo_){nullptr}
    , decltype(_impl_.phist_){nullptr}
    , decltype(_impl_.phisw_){nullptr}
    , decltype(_impl_.cpg_){nullptr}
    , decltype(_impl_.contact_){nullptr}
    , decltype(_impl_.phasechangeflag_){nullptr}
    , decltype(_impl_.periodchangeflag_){nullptr}
    , decltype(_impl_.phasediff_){nullptr}
    , decltype(_impl_.phitran_){nullptr}
    , decltype(_impl_.phitranst_){nullptr}
    , decltype(_impl_.phitransw_){nullptr}
    , decltype(_impl_.step_){nullptr}
    , decltype(_impl_.dt_){0}
    , decltype(_impl_.air_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CpgState::~CpgState() {
  // @@protoc_insertion_point(destructor:dtproto.leoquad.CpgState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpgState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.periods_;
  if (this != internal_default_instance()) delete _impl_.phases_;
  if (this != internal_default_instance()) delete _impl_.phi_;
  if (this != internal_default_instance()) delete _impl_.phitogo_;
  if (this != internal_default_instance()) delete _impl_.phist_;
  if (this != internal_default_instance()) delete _impl_.phisw_;
  if (this != internal_default_instance()) delete _impl_.cpg_;
  if (this != internal_default_instance()) delete _impl_.contact_;
  if (this != internal_default_instance()) delete _impl_.phasechangeflag_;
  if (this != internal_default_instance()) delete _impl_.periodchangeflag_;
  if (this != internal_default_instance()) delete _impl_.phasediff_;
  if (this != internal_default_instance()) delete _impl_.phitran_;
  if (this != internal_default_instance()) delete _impl_.phitranst_;
  if (this != internal_default_instance()) delete _impl_.phitransw_;
  if (this != internal_default_instance()) delete _impl_.step_;
}

void CpgState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpgState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.leoquad.CpgState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.periods_ != nullptr) {
    delete _impl_.periods_;
  }
  _impl_.periods_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phases_ != nullptr) {
    delete _impl_.phases_;
  }
  _impl_.phases_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phi_ != nullptr) {
    delete _impl_.phi_;
  }
  _impl_.phi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phitogo_ != nullptr) {
    delete _impl_.phitogo_;
  }
  _impl_.phitogo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phist_ != nullptr) {
    delete _impl_.phist_;
  }
  _impl_.phist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phisw_ != nullptr) {
    delete _impl_.phisw_;
  }
  _impl_.phisw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cpg_ != nullptr) {
    delete _impl_.cpg_;
  }
  _impl_.cpg_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.contact_ != nullptr) {
    delete _impl_.contact_;
  }
  _impl_.contact_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phasechangeflag_ != nullptr) {
    delete _impl_.phasechangeflag_;
  }
  _impl_.phasechangeflag_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.periodchangeflag_ != nullptr) {
    delete _impl_.periodchangeflag_;
  }
  _impl_.periodchangeflag_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phasediff_ != nullptr) {
    delete _impl_.phasediff_;
  }
  _impl_.phasediff_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phitran_ != nullptr) {
    delete _impl_.phitran_;
  }
  _impl_.phitran_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phitranst_ != nullptr) {
    delete _impl_.phitranst_;
  }
  _impl_.phitranst_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.phitransw_ != nullptr) {
    delete _impl_.phitransw_;
  }
  _impl_.phitransw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.step_ != nullptr) {
    delete _impl_.step_;
  }
  _impl_.step_ = nullptr;
  ::memset(&_impl_.dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.air_) -
      reinterpret_cast<char*>(&_impl_.dt_)) + sizeof(_impl_.air_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpgState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.geometry_msgs.Vector2d periods = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_periods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d phases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_phases(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d phi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_phi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d phiToGo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_phitogo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d phiSt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_phist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d phiSw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_phisw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d cpg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4b contact = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4b phaseChangeFlag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_phasechangeflag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4b periodChangeFlag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_periodchangeflag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d phaseDiff = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_phasediff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d phiTran = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_phitran(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d phiTranSt = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_phitranst(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4d phiTranSw = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_phitransw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Vector4i32 step = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_step(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double dt = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.dt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool air = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.air_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CpgState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.leoquad.CpgState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Vector2d periods = 1;
  if (this->_internal_has_periods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::periods(this),
        _Internal::periods(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d phases = 2;
  if (this->_internal_has_phases()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::phases(this),
        _Internal::phases(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d phi = 3;
  if (this->_internal_has_phi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::phi(this),
        _Internal::phi(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d phiToGo = 4;
  if (this->_internal_has_phitogo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::phitogo(this),
        _Internal::phitogo(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d phiSt = 5;
  if (this->_internal_has_phist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::phist(this),
        _Internal::phist(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d phiSw = 6;
  if (this->_internal_has_phisw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::phisw(this),
        _Internal::phisw(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d cpg = 7;
  if (this->_internal_has_cpg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cpg(this),
        _Internal::cpg(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4b contact = 8;
  if (this->_internal_has_contact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::contact(this),
        _Internal::contact(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4b phaseChangeFlag = 9;
  if (this->_internal_has_phasechangeflag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::phasechangeflag(this),
        _Internal::phasechangeflag(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4b periodChangeFlag = 10;
  if (this->_internal_has_periodchangeflag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::periodchangeflag(this),
        _Internal::periodchangeflag(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d phaseDiff = 11;
  if (this->_internal_has_phasediff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::phasediff(this),
        _Internal::phasediff(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d phiTran = 12;
  if (this->_internal_has_phitran()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::phitran(this),
        _Internal::phitran(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d phiTranSt = 13;
  if (this->_internal_has_phitranst()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::phitranst(this),
        _Internal::phitranst(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4d phiTranSw = 14;
  if (this->_internal_has_phitransw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::phitransw(this),
        _Internal::phitransw(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Vector4i32 step = 15;
  if (this->_internal_has_step()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::step(this),
        _Internal::step(this).GetCachedSize(), target, stream);
  }

  // double dt = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dt = this->_internal_dt();
  uint64_t raw_dt;
  memcpy(&raw_dt, &tmp_dt, sizeof(tmp_dt));
  if (raw_dt != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_dt(), target);
  }

  // bool air = 17;
  if (this->_internal_air() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_air(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.leoquad.CpgState)
  return target;
}

size_t CpgState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.leoquad.CpgState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Vector2d periods = 1;
  if (this->_internal_has_periods()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.periods_);
  }

  // .dtproto.geometry_msgs.Vector4d phases = 2;
  if (this->_internal_has_phases()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phases_);
  }

  // .dtproto.geometry_msgs.Vector4d phi = 3;
  if (this->_internal_has_phi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phi_);
  }

  // .dtproto.geometry_msgs.Vector4d phiToGo = 4;
  if (this->_internal_has_phitogo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phitogo_);
  }

  // .dtproto.geometry_msgs.Vector4d phiSt = 5;
  if (this->_internal_has_phist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phist_);
  }

  // .dtproto.geometry_msgs.Vector4d phiSw = 6;
  if (this->_internal_has_phisw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phisw_);
  }

  // .dtproto.geometry_msgs.Vector4d cpg = 7;
  if (this->_internal_has_cpg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cpg_);
  }

  // .dtproto.geometry_msgs.Vector4b contact = 8;
  if (this->_internal_has_contact()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contact_);
  }

  // .dtproto.geometry_msgs.Vector4b phaseChangeFlag = 9;
  if (this->_internal_has_phasechangeflag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phasechangeflag_);
  }

  // .dtproto.geometry_msgs.Vector4b periodChangeFlag = 10;
  if (this->_internal_has_periodchangeflag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.periodchangeflag_);
  }

  // .dtproto.geometry_msgs.Vector4d phaseDiff = 11;
  if (this->_internal_has_phasediff()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phasediff_);
  }

  // .dtproto.geometry_msgs.Vector4d phiTran = 12;
  if (this->_internal_has_phitran()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phitran_);
  }

  // .dtproto.geometry_msgs.Vector4d phiTranSt = 13;
  if (this->_internal_has_phitranst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phitranst_);
  }

  // .dtproto.geometry_msgs.Vector4d phiTranSw = 14;
  if (this->_internal_has_phitransw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.phitransw_);
  }

  // .dtproto.geometry_msgs.Vector4i32 step = 15;
  if (this->_internal_has_step()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.step_);
  }

  // double dt = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dt = this->_internal_dt();
  uint64_t raw_dt;
  memcpy(&raw_dt, &tmp_dt, sizeof(tmp_dt));
  if (raw_dt != 0) {
    total_size += 2 + 8;
  }

  // bool air = 17;
  if (this->_internal_air() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpgState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpgState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpgState::GetClassData() const { return &_class_data_; }


void CpgState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpgState*>(&to_msg);
  auto& from = static_cast<const CpgState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.leoquad.CpgState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_periods()) {
    _this->_internal_mutable_periods()->::dtproto::geometry_msgs::Vector2d::MergeFrom(
        from._internal_periods());
  }
  if (from._internal_has_phases()) {
    _this->_internal_mutable_phases()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_phases());
  }
  if (from._internal_has_phi()) {
    _this->_internal_mutable_phi()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_phi());
  }
  if (from._internal_has_phitogo()) {
    _this->_internal_mutable_phitogo()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_phitogo());
  }
  if (from._internal_has_phist()) {
    _this->_internal_mutable_phist()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_phist());
  }
  if (from._internal_has_phisw()) {
    _this->_internal_mutable_phisw()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_phisw());
  }
  if (from._internal_has_cpg()) {
    _this->_internal_mutable_cpg()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_cpg());
  }
  if (from._internal_has_contact()) {
    _this->_internal_mutable_contact()->::dtproto::geometry_msgs::Vector4b::MergeFrom(
        from._internal_contact());
  }
  if (from._internal_has_phasechangeflag()) {
    _this->_internal_mutable_phasechangeflag()->::dtproto::geometry_msgs::Vector4b::MergeFrom(
        from._internal_phasechangeflag());
  }
  if (from._internal_has_periodchangeflag()) {
    _this->_internal_mutable_periodchangeflag()->::dtproto::geometry_msgs::Vector4b::MergeFrom(
        from._internal_periodchangeflag());
  }
  if (from._internal_has_phasediff()) {
    _this->_internal_mutable_phasediff()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_phasediff());
  }
  if (from._internal_has_phitran()) {
    _this->_internal_mutable_phitran()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_phitran());
  }
  if (from._internal_has_phitranst()) {
    _this->_internal_mutable_phitranst()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_phitranst());
  }
  if (from._internal_has_phitransw()) {
    _this->_internal_mutable_phitransw()->::dtproto::geometry_msgs::Vector4d::MergeFrom(
        from._internal_phitransw());
  }
  if (from._internal_has_step()) {
    _this->_internal_mutable_step()->::dtproto::geometry_msgs::Vector4i32::MergeFrom(
        from._internal_step());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dt = from._internal_dt();
  uint64_t raw_dt;
  memcpy(&raw_dt, &tmp_dt, sizeof(tmp_dt));
  if (raw_dt != 0) {
    _this->_internal_set_dt(from._internal_dt());
  }
  if (from._internal_air() != 0) {
    _this->_internal_set_air(from._internal_air());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpgState::CopyFrom(const CpgState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.leoquad.CpgState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpgState::IsInitialized() const {
  return true;
}

void CpgState::InternalSwap(CpgState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpgState, _impl_.air_)
      + sizeof(CpgState::_impl_.air_)
      - PROTOBUF_FIELD_OFFSET(CpgState, _impl_.periods_)>(
          reinterpret_cast<char*>(&_impl_.periods_),
          reinterpret_cast<char*>(&other->_impl_.periods_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpgState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LeoQuad_2eproto_getter, &descriptor_table_LeoQuad_2eproto_once,
      file_level_metadata_LeoQuad_2eproto[5]);
}

// ===================================================================

class LeoQuadState::_Internal {
 public:
  static const ::dtproto::leoquad::TaskState& destaskstate(const LeoQuadState* msg);
  static const ::dtproto::leoquad::TaskState& acttaskstate(const LeoQuadState* msg);
  static const ::dtproto::sensor_msgs::Imu& imu(const LeoQuadState* msg);
  static const ::dtproto::sensor_msgs::Joy& joystick(const LeoQuadState* msg);
  static const ::dtproto::leoquad::ControlState& actcontrolstate(const LeoQuadState* msg);
  static const ::dtproto::leoquad::ControlState& descontrolstate(const LeoQuadState* msg);
  static const ::dtproto::leoquad::CpgState& cpgstate(const LeoQuadState* msg);
  static const ::dtproto::leoquad::ThreadState& threadstate(const LeoQuadState* msg);
  static const ::dtproto::std_msgs::PackedDouble& arbitrarystate(const LeoQuadState* msg);
};

const ::dtproto::leoquad::TaskState&
LeoQuadState::_Internal::destaskstate(const LeoQuadState* msg) {
  return *msg->_impl_.destaskstate_;
}
const ::dtproto::leoquad::TaskState&
LeoQuadState::_Internal::acttaskstate(const LeoQuadState* msg) {
  return *msg->_impl_.acttaskstate_;
}
const ::dtproto::sensor_msgs::Imu&
LeoQuadState::_Internal::imu(const LeoQuadState* msg) {
  return *msg->_impl_.imu_;
}
const ::dtproto::sensor_msgs::Joy&
LeoQuadState::_Internal::joystick(const LeoQuadState* msg) {
  return *msg->_impl_.joystick_;
}
const ::dtproto::leoquad::ControlState&
LeoQuadState::_Internal::actcontrolstate(const LeoQuadState* msg) {
  return *msg->_impl_.actcontrolstate_;
}
const ::dtproto::leoquad::ControlState&
LeoQuadState::_Internal::descontrolstate(const LeoQuadState* msg) {
  return *msg->_impl_.descontrolstate_;
}
const ::dtproto::leoquad::CpgState&
LeoQuadState::_Internal::cpgstate(const LeoQuadState* msg) {
  return *msg->_impl_.cpgstate_;
}
const ::dtproto::leoquad::ThreadState&
LeoQuadState::_Internal::threadstate(const LeoQuadState* msg) {
  return *msg->_impl_.threadstate_;
}
const ::dtproto::std_msgs::PackedDouble&
LeoQuadState::_Internal::arbitrarystate(const LeoQuadState* msg) {
  return *msg->_impl_.arbitrarystate_;
}
void LeoQuadState::clear_imu() {
  if (GetArenaForAllocation() == nullptr && _impl_.imu_ != nullptr) {
    delete _impl_.imu_;
  }
  _impl_.imu_ = nullptr;
}
void LeoQuadState::clear_joystick() {
  if (GetArenaForAllocation() == nullptr && _impl_.joystick_ != nullptr) {
    delete _impl_.joystick_;
  }
  _impl_.joystick_ = nullptr;
}
void LeoQuadState::clear_arbitrarystate() {
  if (GetArenaForAllocation() == nullptr && _impl_.arbitrarystate_ != nullptr) {
    delete _impl_.arbitrarystate_;
  }
  _impl_.arbitrarystate_ = nullptr;
}
LeoQuadState::LeoQuadState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.leoquad.LeoQuadState)
}
LeoQuadState::LeoQuadState(const LeoQuadState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeoQuadState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jointstate_){from._impl_.jointstate_}
    , decltype(_impl_.actjointdata_){from._impl_.actjointdata_}
    , decltype(_impl_.desjointdata_){from._impl_.desjointdata_}
    , decltype(_impl_.destaskstate_){nullptr}
    , decltype(_impl_.acttaskstate_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.joystick_){nullptr}
    , decltype(_impl_.actcontrolstate_){nullptr}
    , decltype(_impl_.descontrolstate_){nullptr}
    , decltype(_impl_.cpgstate_){nullptr}
    , decltype(_impl_.threadstate_){nullptr}
    , decltype(_impl_.arbitrarystate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_destaskstate()) {
    _this->_impl_.destaskstate_ = new ::dtproto::leoquad::TaskState(*from._impl_.destaskstate_);
  }
  if (from._internal_has_acttaskstate()) {
    _this->_impl_.acttaskstate_ = new ::dtproto::leoquad::TaskState(*from._impl_.acttaskstate_);
  }
  if (from._internal_has_imu()) {
    _this->_impl_.imu_ = new ::dtproto::sensor_msgs::Imu(*from._impl_.imu_);
  }
  if (from._internal_has_joystick()) {
    _this->_impl_.joystick_ = new ::dtproto::sensor_msgs::Joy(*from._impl_.joystick_);
  }
  if (from._internal_has_actcontrolstate()) {
    _this->_impl_.actcontrolstate_ = new ::dtproto::leoquad::ControlState(*from._impl_.actcontrolstate_);
  }
  if (from._internal_has_descontrolstate()) {
    _this->_impl_.descontrolstate_ = new ::dtproto::leoquad::ControlState(*from._impl_.descontrolstate_);
  }
  if (from._internal_has_cpgstate()) {
    _this->_impl_.cpgstate_ = new ::dtproto::leoquad::CpgState(*from._impl_.cpgstate_);
  }
  if (from._internal_has_threadstate()) {
    _this->_impl_.threadstate_ = new ::dtproto::leoquad::ThreadState(*from._impl_.threadstate_);
  }
  if (from._internal_has_arbitrarystate()) {
    _this->_impl_.arbitrarystate_ = new ::dtproto::std_msgs::PackedDouble(*from._impl_.arbitrarystate_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.leoquad.LeoQuadState)
}

inline void LeoQuadState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.jointstate_){arena}
    , decltype(_impl_.actjointdata_){arena}
    , decltype(_impl_.desjointdata_){arena}
    , decltype(_impl_.destaskstate_){nullptr}
    , decltype(_impl_.acttaskstate_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.joystick_){nullptr}
    , decltype(_impl_.actcontrolstate_){nullptr}
    , decltype(_impl_.descontrolstate_){nullptr}
    , decltype(_impl_.cpgstate_){nullptr}
    , decltype(_impl_.threadstate_){nullptr}
    , decltype(_impl_.arbitrarystate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeoQuadState::~LeoQuadState() {
  // @@protoc_insertion_point(destructor:dtproto.leoquad.LeoQuadState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeoQuadState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jointstate_.~RepeatedPtrField();
  _impl_.actjointdata_.~RepeatedPtrField();
  _impl_.desjointdata_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.destaskstate_;
  if (this != internal_default_instance()) delete _impl_.acttaskstate_;
  if (this != internal_default_instance()) delete _impl_.imu_;
  if (this != internal_default_instance()) delete _impl_.joystick_;
  if (this != internal_default_instance()) delete _impl_.actcontrolstate_;
  if (this != internal_default_instance()) delete _impl_.descontrolstate_;
  if (this != internal_default_instance()) delete _impl_.cpgstate_;
  if (this != internal_default_instance()) delete _impl_.threadstate_;
  if (this != internal_default_instance()) delete _impl_.arbitrarystate_;
}

void LeoQuadState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeoQuadState::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.leoquad.LeoQuadState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jointstate_.Clear();
  _impl_.actjointdata_.Clear();
  _impl_.desjointdata_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.destaskstate_ != nullptr) {
    delete _impl_.destaskstate_;
  }
  _impl_.destaskstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.acttaskstate_ != nullptr) {
    delete _impl_.acttaskstate_;
  }
  _impl_.acttaskstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.imu_ != nullptr) {
    delete _impl_.imu_;
  }
  _impl_.imu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.joystick_ != nullptr) {
    delete _impl_.joystick_;
  }
  _impl_.joystick_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.actcontrolstate_ != nullptr) {
    delete _impl_.actcontrolstate_;
  }
  _impl_.actcontrolstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.descontrolstate_ != nullptr) {
    delete _impl_.descontrolstate_;
  }
  _impl_.descontrolstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cpgstate_ != nullptr) {
    delete _impl_.cpgstate_;
  }
  _impl_.cpgstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.threadstate_ != nullptr) {
    delete _impl_.threadstate_;
  }
  _impl_.threadstate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arbitrarystate_ != nullptr) {
    delete _impl_.arbitrarystate_;
  }
  _impl_.arbitrarystate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeoQuadState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dtproto.leoquad.JointState jointState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jointstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.leoquad.JointData actJointData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actjointdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.leoquad.JointData desJointData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_desjointdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .dtproto.leoquad.TaskState desTaskState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_destaskstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.leoquad.TaskState actTaskState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_acttaskstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.sensor_msgs.Imu imu = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.sensor_msgs.Joy joystick = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_joystick(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.leoquad.ControlState actControlState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_actcontrolstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.leoquad.ControlState desControlState = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_descontrolstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.leoquad.CpgState cpgState = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpgstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.leoquad.ThreadState threadState = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_threadstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.std_msgs.PackedDouble arbitraryState = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_arbitrarystate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeoQuadState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.leoquad.LeoQuadState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dtproto.leoquad.JointState jointState = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_jointstate_size()); i < n; i++) {
    const auto& repfield = this->_internal_jointstate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.leoquad.JointData actJointData = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actjointdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_actjointdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dtproto.leoquad.JointData desJointData = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_desjointdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_desjointdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .dtproto.leoquad.TaskState desTaskState = 4;
  if (this->_internal_has_destaskstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::destaskstate(this),
        _Internal::destaskstate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.leoquad.TaskState actTaskState = 5;
  if (this->_internal_has_acttaskstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::acttaskstate(this),
        _Internal::acttaskstate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.sensor_msgs.Imu imu = 6;
  if (this->_internal_has_imu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::imu(this),
        _Internal::imu(this).GetCachedSize(), target, stream);
  }

  // .dtproto.sensor_msgs.Joy joystick = 7;
  if (this->_internal_has_joystick()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::joystick(this),
        _Internal::joystick(this).GetCachedSize(), target, stream);
  }

  // .dtproto.leoquad.ControlState actControlState = 8;
  if (this->_internal_has_actcontrolstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::actcontrolstate(this),
        _Internal::actcontrolstate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.leoquad.ControlState desControlState = 9;
  if (this->_internal_has_descontrolstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::descontrolstate(this),
        _Internal::descontrolstate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.leoquad.CpgState cpgState = 10;
  if (this->_internal_has_cpgstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cpgstate(this),
        _Internal::cpgstate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.leoquad.ThreadState threadState = 11;
  if (this->_internal_has_threadstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::threadstate(this),
        _Internal::threadstate(this).GetCachedSize(), target, stream);
  }

  // .dtproto.std_msgs.PackedDouble arbitraryState = 20;
  if (this->_internal_has_arbitrarystate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::arbitrarystate(this),
        _Internal::arbitrarystate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.leoquad.LeoQuadState)
  return target;
}

size_t LeoQuadState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.leoquad.LeoQuadState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dtproto.leoquad.JointState jointState = 1;
  total_size += 1UL * this->_internal_jointstate_size();
  for (const auto& msg : this->_impl_.jointstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.leoquad.JointData actJointData = 2;
  total_size += 1UL * this->_internal_actjointdata_size();
  for (const auto& msg : this->_impl_.actjointdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dtproto.leoquad.JointData desJointData = 3;
  total_size += 1UL * this->_internal_desjointdata_size();
  for (const auto& msg : this->_impl_.desjointdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dtproto.leoquad.TaskState desTaskState = 4;
  if (this->_internal_has_destaskstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destaskstate_);
  }

  // .dtproto.leoquad.TaskState actTaskState = 5;
  if (this->_internal_has_acttaskstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acttaskstate_);
  }

  // .dtproto.sensor_msgs.Imu imu = 6;
  if (this->_internal_has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.imu_);
  }

  // .dtproto.sensor_msgs.Joy joystick = 7;
  if (this->_internal_has_joystick()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.joystick_);
  }

  // .dtproto.leoquad.ControlState actControlState = 8;
  if (this->_internal_has_actcontrolstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.actcontrolstate_);
  }

  // .dtproto.leoquad.ControlState desControlState = 9;
  if (this->_internal_has_descontrolstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.descontrolstate_);
  }

  // .dtproto.leoquad.CpgState cpgState = 10;
  if (this->_internal_has_cpgstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cpgstate_);
  }

  // .dtproto.leoquad.ThreadState threadState = 11;
  if (this->_internal_has_threadstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.threadstate_);
  }

  // .dtproto.std_msgs.PackedDouble arbitraryState = 20;
  if (this->_internal_has_arbitrarystate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arbitrarystate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeoQuadState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeoQuadState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeoQuadState::GetClassData() const { return &_class_data_; }


void LeoQuadState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeoQuadState*>(&to_msg);
  auto& from = static_cast<const LeoQuadState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.leoquad.LeoQuadState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.jointstate_.MergeFrom(from._impl_.jointstate_);
  _this->_impl_.actjointdata_.MergeFrom(from._impl_.actjointdata_);
  _this->_impl_.desjointdata_.MergeFrom(from._impl_.desjointdata_);
  if (from._internal_has_destaskstate()) {
    _this->_internal_mutable_destaskstate()->::dtproto::leoquad::TaskState::MergeFrom(
        from._internal_destaskstate());
  }
  if (from._internal_has_acttaskstate()) {
    _this->_internal_mutable_acttaskstate()->::dtproto::leoquad::TaskState::MergeFrom(
        from._internal_acttaskstate());
  }
  if (from._internal_has_imu()) {
    _this->_internal_mutable_imu()->::dtproto::sensor_msgs::Imu::MergeFrom(
        from._internal_imu());
  }
  if (from._internal_has_joystick()) {
    _this->_internal_mutable_joystick()->::dtproto::sensor_msgs::Joy::MergeFrom(
        from._internal_joystick());
  }
  if (from._internal_has_actcontrolstate()) {
    _this->_internal_mutable_actcontrolstate()->::dtproto::leoquad::ControlState::MergeFrom(
        from._internal_actcontrolstate());
  }
  if (from._internal_has_descontrolstate()) {
    _this->_internal_mutable_descontrolstate()->::dtproto::leoquad::ControlState::MergeFrom(
        from._internal_descontrolstate());
  }
  if (from._internal_has_cpgstate()) {
    _this->_internal_mutable_cpgstate()->::dtproto::leoquad::CpgState::MergeFrom(
        from._internal_cpgstate());
  }
  if (from._internal_has_threadstate()) {
    _this->_internal_mutable_threadstate()->::dtproto::leoquad::ThreadState::MergeFrom(
        from._internal_threadstate());
  }
  if (from._internal_has_arbitrarystate()) {
    _this->_internal_mutable_arbitrarystate()->::dtproto::std_msgs::PackedDouble::MergeFrom(
        from._internal_arbitrarystate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeoQuadState::CopyFrom(const LeoQuadState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.leoquad.LeoQuadState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeoQuadState::IsInitialized() const {
  return true;
}

void LeoQuadState::InternalSwap(LeoQuadState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.jointstate_.InternalSwap(&other->_impl_.jointstate_);
  _impl_.actjointdata_.InternalSwap(&other->_impl_.actjointdata_);
  _impl_.desjointdata_.InternalSwap(&other->_impl_.desjointdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeoQuadState, _impl_.arbitrarystate_)
      + sizeof(LeoQuadState::_impl_.arbitrarystate_)
      - PROTOBUF_FIELD_OFFSET(LeoQuadState, _impl_.destaskstate_)>(
          reinterpret_cast<char*>(&_impl_.destaskstate_),
          reinterpret_cast<char*>(&other->_impl_.destaskstate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeoQuadState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LeoQuad_2eproto_getter, &descriptor_table_LeoQuad_2eproto_once,
      file_level_metadata_LeoQuad_2eproto[6]);
}

// ===================================================================

class LeoQuadStateTimeStamped::_Internal {
 public:
  static const ::dtproto::std_msgs::Header& header(const LeoQuadStateTimeStamped* msg);
  static const ::dtproto::leoquad::LeoQuadState& state(const LeoQuadStateTimeStamped* msg);
};

const ::dtproto::std_msgs::Header&
LeoQuadStateTimeStamped::_Internal::header(const LeoQuadStateTimeStamped* msg) {
  return *msg->_impl_.header_;
}
const ::dtproto::leoquad::LeoQuadState&
LeoQuadStateTimeStamped::_Internal::state(const LeoQuadStateTimeStamped* msg) {
  return *msg->_impl_.state_;
}
void LeoQuadStateTimeStamped::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
LeoQuadStateTimeStamped::LeoQuadStateTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.leoquad.LeoQuadStateTimeStamped)
}
LeoQuadStateTimeStamped::LeoQuadStateTimeStamped(const LeoQuadStateTimeStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeoQuadStateTimeStamped* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::dtproto::std_msgs::Header(*from._impl_.header_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::dtproto::leoquad::LeoQuadState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.leoquad.LeoQuadStateTimeStamped)
}

inline void LeoQuadStateTimeStamped::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeoQuadStateTimeStamped::~LeoQuadStateTimeStamped() {
  // @@protoc_insertion_point(destructor:dtproto.leoquad.LeoQuadStateTimeStamped)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeoQuadStateTimeStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void LeoQuadStateTimeStamped::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeoQuadStateTimeStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.leoquad.LeoQuadStateTimeStamped)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeoQuadStateTimeStamped::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.leoquad.LeoQuadState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeoQuadStateTimeStamped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.leoquad.LeoQuadStateTimeStamped)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .dtproto.leoquad.LeoQuadState state = 2;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.leoquad.LeoQuadStateTimeStamped)
  return target;
}

size_t LeoQuadStateTimeStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.leoquad.LeoQuadStateTimeStamped)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .dtproto.leoquad.LeoQuadState state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeoQuadStateTimeStamped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeoQuadStateTimeStamped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeoQuadStateTimeStamped::GetClassData() const { return &_class_data_; }


void LeoQuadStateTimeStamped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeoQuadStateTimeStamped*>(&to_msg);
  auto& from = static_cast<const LeoQuadStateTimeStamped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.leoquad.LeoQuadStateTimeStamped)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::dtproto::std_msgs::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::dtproto::leoquad::LeoQuadState::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeoQuadStateTimeStamped::CopyFrom(const LeoQuadStateTimeStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.leoquad.LeoQuadStateTimeStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeoQuadStateTimeStamped::IsInitialized() const {
  return true;
}

void LeoQuadStateTimeStamped::InternalSwap(LeoQuadStateTimeStamped* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeoQuadStateTimeStamped, _impl_.state_)
      + sizeof(LeoQuadStateTimeStamped::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(LeoQuadStateTimeStamped, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeoQuadStateTimeStamped::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LeoQuad_2eproto_getter, &descriptor_table_LeoQuad_2eproto_once,
      file_level_metadata_LeoQuad_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace leoquad
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtproto::leoquad::ThreadState*
Arena::CreateMaybeMessage< ::dtproto::leoquad::ThreadState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::leoquad::ThreadState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::leoquad::TaskState*
Arena::CreateMaybeMessage< ::dtproto::leoquad::TaskState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::leoquad::TaskState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::leoquad::JointState*
Arena::CreateMaybeMessage< ::dtproto::leoquad::JointState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::leoquad::JointState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::leoquad::JointData*
Arena::CreateMaybeMessage< ::dtproto::leoquad::JointData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::leoquad::JointData >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::leoquad::ControlState*
Arena::CreateMaybeMessage< ::dtproto::leoquad::ControlState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::leoquad::ControlState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::leoquad::CpgState*
Arena::CreateMaybeMessage< ::dtproto::leoquad::CpgState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::leoquad::CpgState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::leoquad::LeoQuadState*
Arena::CreateMaybeMessage< ::dtproto::leoquad::LeoQuadState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::leoquad::LeoQuadState >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::leoquad::LeoQuadStateTimeStamped*
Arena::CreateMaybeMessage< ::dtproto::leoquad::LeoQuadStateTimeStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::leoquad::LeoQuadStateTimeStamped >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
